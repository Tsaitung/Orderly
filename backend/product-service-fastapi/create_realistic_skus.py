#!/usr/bin/env python3
"""
Create realistic SKU data for all sub-categories
Support both weight-based and item-based pricing
"""
import asyncio
import sys
import os
import uuid
from datetime import datetime
from typing import Dict, List, Tuple
import httpx

# Add app directory to path
sys.path.append(os.path.dirname(__file__))

from app.core.database import get_async_session, async_engine
from app.models.product import Product, PricingMethod
from app.models.sku_simple import ProductSKU
from app.models.category import ProductCategory
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload


# Category-specific SKU configurations
CATEGORY_SKU_CONFIG = {
    # Ëî¨ËèúÈ°û - ÈáçÈáèË®àÂÉπ
    "LEAF": {  # ËëâËèúÈ°û
        "pricing_method": PricingMethod.BY_WEIGHT,
        "base_unit": "kg",
        "products": [
            ("ÊúâÊ©üËè†Ëèú", {"ÂìÅÁ®Æ": "Âè∞ÁÅ£Ëè†Ëèú", "Áî¢Âú∞": "ÂΩ∞Âåñ"}, 120.0, 0.3, 0.1),
            ("AËèú", {"ÂìÅÁ®Æ": "Ê≤πËèú", "Áî¢Âú∞": "Èõ≤Êûó"}, 80.0, 0.5, 0.1),
            ("ÈùíÊ±üËèú", {"ÂìÅÁ®Æ": "Â∞èÁôΩËèú", "Áî¢Âú∞": "Âè∞‰∏≠"}, 90.0, 0.5, 0.1),
            ("Â§ßÈô∏Â¶π", {"ÂìÅÁ®Æ": "ËêµËã£", "Áî¢Âú∞": "Âè∞Âçó"}, 85.0, 0.3, 0.1),
            ("È´òÈ∫óËèú", {"ÂìÅÁ®Æ": "ÂúìÁôΩËèú", "Áî¢Âú∞": "Âè∞‰∏≠"}, 50.0, 1.0, 0.5),
            ("ÁôΩËèú", {"ÂìÅÁ®Æ": "Â∞èÁôΩËèú", "Áî¢Âú∞": "ÂòâÁæ©"}, 60.0, 0.5, 0.1),
            ("Ëä•Ëèú", {"ÂìÅÁ®Æ": "Ëä•ËóçËèú", "Áî¢Âú∞": "Â±èÊù±"}, 75.0, 0.5, 0.1),
        ]
    },
    "ARSS": {  # Ëî•ËñëËíúÔºèËæõÈ¶ôÊñô
        "pricing_method": PricingMethod.BY_WEIGHT,
        "base_unit": "kg",
        "products": [
            ("ÈùíËî•", {"ÂìÅÁ®Æ": "‰∏âÊòüËî•", "Áî¢Âú∞": "ÂÆúËò≠"}, 150.0, 0.2, 0.1),
            ("ËÄÅËñë", {"ÂìÅÁ®Æ": "Á´πËñë", "Áî¢Âú∞": "ÂçóÊäï"}, 180.0, 0.3, 0.1),
            ("ËíúÈ†≠", {"ÂìÅÁ®Æ": "Â§ßËíú", "Áî¢Âú∞": "Èõ≤Êûó"}, 200.0, 0.2, 0.1),
            ("Ëæ£Ê§í", {"ÂìÅÁ®Æ": "ÊúùÂ§©Ê§í", "Áî¢Âú∞": "Âè∞Âçó"}, 300.0, 0.1, 0.05),
            ("Ê¥ãËî•", {"ÂìÅÁ®Æ": "ÈªÉÊ¥ãËî•", "Áî¢Âú∞": "Â±èÊù±"}, 45.0, 1.0, 0.5),
            ("Á¥ÖËî•È†≠", {"ÂìÅÁ®Æ": "Â∞èÊ¥ãËî•", "Áî¢Âú∞": "ÂΩ∞Âåñ"}, 220.0, 0.3, 0.1),
        ]
    },
    "ROOT": {  # Ê†πËéñÈ°û
        "pricing_method": PricingMethod.BY_WEIGHT,
        "base_unit": "kg",
        "products": [
            ("ÁôΩËòøËîî", {"ÂìÅÁ®Æ": "Êó•Êú¨ËòøËîî", "Áî¢Âú∞": "Âè∞‰∏≠"}, 35.0, 1.0, 0.5),
            ("Á¥ÖËòøËîî", {"ÂìÅÁ®Æ": "ËÉ°ËòøËîî", "Áî¢Âú∞": "Èõ≤Êûó"}, 45.0, 1.0, 0.5),
            ("È¶¨Èà¥ËñØ", {"ÂìÅÁ®Æ": "ÂÖãÂ∞º‰ºØ", "Áî¢Âú∞": "Âè∞Âåó"}, 55.0, 1.0, 0.5),
            ("Âú∞Áìú", {"ÂìÅÁ®Æ": "Âè∞Ëæ≤66Ëôü", "Áî¢Âú∞": "Âè∞Âçó"}, 65.0, 1.0, 0.5),
            ("ËäãÈ†≠", {"ÂìÅÁ®Æ": "Ê™≥Ê¶îÂøÉËäã", "Áî¢Âú∞": "Âè∞‰∏≠"}, 90.0, 1.0, 0.5),
            ("Â±±Ëó•", {"ÂìÅÁ®Æ": "Âè∞ÁÅ£Â±±Ëó•", "Áî¢Âú∞": "ÂçóÊäï"}, 280.0, 0.5, 0.1),
        ]
    },
    
    # ËÇâÂìÅÈ°û - ÈáçÈáèË®àÂÉπ
    "BLON": {  # Áâõ-ËÖ∞ËÑäÈÉ®
        "pricing_method": PricingMethod.BY_WEIGHT,
        "base_unit": "kg",
        "products": [
            ("Á¥êÁ¥ÑÂÆ¢ÁâõÊéí", {"ÈÉ®‰Ωç": "ËÖ∞ËÑä", "Á≠âÁ¥ö": "Prime"}, 1200.0, 0.5, 0.1),
            ("Ë•øÂÜ∑ÁâõÊéí", {"ÈÉ®‰Ωç": "ËÖ∞ËÑä", "Á≠âÁ¥ö": "Choice"}, 980.0, 0.5, 0.1),
            ("ËÇãÁúºÁâõÊéí", {"ÈÉ®‰Ωç": "ËÇãËÑä", "Á≠âÁ¥ö": "Prime"}, 1300.0, 0.5, 0.1),
            ("Ëè≤ÂäõÁâõÊéí", {"ÈÉ®‰Ωç": "ËÖ∞ÂÖßËÇâ", "Á≠âÁ¥ö": "Prime"}, 1800.0, 0.3, 0.1),
            ("TÈ™®ÁâõÊéí", {"ÈÉ®‰Ωç": "ËÖ∞ËÑä", "Á≠âÁ¥ö": "Choice"}, 1100.0, 0.5, 0.1),
        ]
    },
    "THGH": {  # ÈõûËÖøÔºèËÖøÊéí
        "pricing_method": PricingMethod.BY_WEIGHT,
        "base_unit": "kg",
        "products": [
            ("ÂéªÈ™®ÈõûËÖøÊéí", {"ÈÉ®‰Ωç": "Â§ßËÖø", "ËôïÁêÜ": "ÂéªÈ™®"}, 180.0, 1.0, 0.5),
            ("Â∏∂È™®ÈõûËÖø", {"ÈÉ®‰Ωç": "Â§ßËÖø", "ËôïÁêÜ": "Â∏∂È™®"}, 120.0, 1.0, 0.5),
            ("ÈõûËÖøËÇâ‰∏Å", {"ÈÉ®‰Ωç": "Â§ßËÖø", "ËôïÁêÜ": "Âàá‰∏Å"}, 190.0, 0.5, 0.2),
            ("ÈõûËÖøÁµûËÇâ", {"ÈÉ®‰Ωç": "Â§ßËÖø", "ËôïÁêÜ": "ÁµûËÇâ"}, 160.0, 0.5, 0.2),
            ("Ê£íÊ£íËÖø", {"ÈÉ®‰Ωç": "Â∞èËÖø", "ËôïÁêÜ": "Â∏∂È™®"}, 95.0, 1.0, 0.5),
        ]
    },
    
    # Ë™øÂë≥ÊñôÈ°û - ÂÄãÊï∏Ë®àÂÉπ
    "SEAS": {  # Ë™øÂë≥Êñô
        "pricing_method": PricingMethod.BY_ITEM,
        "base_unit": "Áì∂",
        "products": [
            ("Áµ±‰∏ÄÈÜ¨Ê≤πËÜè", {"ÂÆπÈáè": "590ml", "ÂìÅÁâå": "Áµ±‰∏Ä"}, 45.0, 1, 1),
            ("ÈáëËò≠ÈÜ¨Ê≤π", {"ÂÆπÈáè": "1ÂÖ¨Âçá", "ÂìÅÁâå": "ÈáëËò≠"}, 85.0, 1, 1),
            ("Âë≥Á≤æ", {"ÂÆπÈáè": "454g", "ÂìÅÁâå": "Âë≥‰πãÁ¥†"}, 65.0, 1, 1),
            ("ÁôΩËÉ°Ê§íÁ≤â", {"ÂÆπÈáè": "100g", "ÂìÅÁâå": "ËÉ°Ê§íÂÖàÁîü"}, 120.0, 1, 1),
            ("È¶ôÊ≤π", {"ÂÆπÈáè": "200ml", "ÂìÅÁâå": "Â§ßÁµ±"}, 95.0, 1, 1),
            ("Á±≥ÈÖí", {"ÂÆπÈáè": "600ml", "ÂìÅÁâå": "Âè∞ÈÖí"}, 25.0, 6, 6),
            ("ÁôΩÈÜã", {"ÂÆπÈáè": "600ml", "ÂìÅÁâå": "Áµ±‰∏Ä"}, 35.0, 1, 1),
            ("Á≥ñ", {"ÂÆπÈáè": "1kg", "ÂìÅÁâå": "Âè∞Á≥ñ"}, 45.0, 1, 1),
            ("ÈπΩ", {"ÂÆπÈáè": "1kg", "ÂìÅÁâå": "Âè∞ÈπΩ"}, 30.0, 1, 1),
        ]
    },
    
    # È§êÂÖ∑Áî®ÂìÅÈ°û - ÂÄãÊï∏Ë®àÂÉπ
    "DSHW": {  # È§êÂÖ∑Áî®ÂìÅ
        "pricing_method": PricingMethod.BY_ITEM,
        "base_unit": "ÂåÖ",
        "products": [
            ("ÂÖçÊ¥óÁ≠∑", {"Êï∏Èáè": "100Èõô", "ÊùêË≥™": "Á´πÁ≠∑"}, 35.0, 10, 10),
            ("Á¥ôÁ¢ó", {"Êï∏Èáè": "50ÂÄã", "ÂÆπÈáè": "500ml"}, 85.0, 1, 1),
            ("Á¥ôÁõ§", {"Êï∏Èáè": "50ÂÄã", "Â∞∫ÂØ∏": "9Âêã"}, 75.0, 1, 1),
            ("Â°ëËÜ†ÊπØÂåô", {"Êï∏Èáè": "100ÊîØ", "ÊùêË≥™": "PP"}, 45.0, 1, 1),
            ("È§êÂÖ∑ÁµÑ", {"Êï∏Èáè": "50Â•ó", "ÂÖßÂÆπ": "Âèâ+Âåô+ÂàÄ"}, 120.0, 1, 1),
            ("Â§ñÂ∏∂Áõí", {"Êï∏Èáè": "50ÂÄã", "Â∞∫ÂØ∏": "‰æøÁï∂Áõí"}, 180.0, 1, 1),
        ]
    },
    
    # Ê∏ÖÊΩîÁî®ÂìÅÈ°û - ÂÄãÊï∏Ë®àÂÉπ
    "FLOR": {  # Âú∞Èù¢Ê∏ÖÊΩî
        "pricing_method": PricingMethod.BY_ITEM,
        "base_unit": "Áì∂",
        "products": [
            ("Âú∞ÊùøÊ∏ÖÊΩîÂäë", {"ÂÆπÈáè": "2ÂÖ¨Âçá", "ÂìÅÁâå": "Ëä±Áéã"}, 180.0, 1, 1),
            ("ÊºÇÁôΩÊ∞¥", {"ÂÆπÈáè": "2ÂÖ¨Âçá", "ÂìÅÁâå": "ÁôΩËò≠"}, 120.0, 1, 1),
            ("ÊãñÊää", {"È°ûÂûã": "Âπ≥ÊùøÊãñ", "ÊùêË≥™": "Ë∂ÖÁ¥∞Á∫ñÁ∂≠"}, 350.0, 1, 1),
            ("ÊéÉÂ∏ö", {"È°ûÂûã": "ËªüÊØõÊéÉÊää", "ÊùêË≥™": "Â°ëËÜ†"}, 180.0, 1, 1),
            ("ÂûÉÂúæË¢ã", {"Êï∏Èáè": "100ÂÄã", "Â∞∫ÂØ∏": "Â§ß"}, 220.0, 1, 1),
        ]
    },
    
    # È£≤ÊñôÈ°û - ÂÄãÊï∏Ë®àÂÉπ
    "TEAS": {  # Ëå∂È°ûÈ£≤ÂìÅ
        "pricing_method": PricingMethod.BY_ITEM,
        "base_unit": "ÂåÖ",
        "products": [
            ("ÁÉèÈæçËå∂ÂåÖ", {"Êï∏Èáè": "100ÂåÖ", "ÂìÅÁâå": "Â§©‰ªÅ"}, 280.0, 1, 1),
            ("Á∂†Ëå∂Ëå∂Ëëâ", {"ÈáçÈáè": "300g", "ÂìÅÁâå": "Â§©Á¶è"}, 450.0, 1, 1),
            ("Á¥ÖËå∂Ëå∂ÂåÖ", {"Êï∏Èáè": "100ÂåÖ", "ÂìÅÁâå": "Á´ãÈ†ì"}, 320.0, 1, 1),
            ("ËåâËéâËä±Ëå∂", {"ÈáçÈáè": "150g", "ÂìÅÁâå": "Âºµ‰∏ÄÂÖÉ"}, 380.0, 1, 1),
            ("ÊôÆÊ¥±Ëå∂È§Ö", {"ÈáçÈáè": "357g", "Âπ¥‰ªΩ": "2020Âπ¥"}, 680.0, 1, 1),
        ]
    },
}


def generate_sku_code(category_code: str, index: int) -> str:
    """Generate unique SKU code"""
    today = datetime.now().strftime("%Y%m%d")
    return f"{category_code}-{today}-{index:03d}"


async def create_products_and_skus():
    """Create products and SKUs for all configured categories"""
    
    # Create a session for database operations
    async with AsyncSession(async_engine) as session:
        # Get all categories
        result = await session.execute(
            select(ProductCategory)
            .where(ProductCategory.level == 2)
        )
        categories = result.scalars().all()
        total_created = 0
        
        for category in categories:
            if category.code not in CATEGORY_SKU_CONFIG:
                print(f"‚ö†Ô∏è  No config for category: {category.code} ({category.name})")
                continue
            
            config = CATEGORY_SKU_CONFIG[category.code]
            print(f"\nüì¶ Processing category: {category.name} ({category.code})")
            print(f"   Ë®àÂÉπÊñπÂºè: {config['pricing_method'].value}")
            
            for i, (product_name, variant, unit_price, min_qty, qty_increment) in enumerate(config["products"]):
                # Create product
                product = Product(
                    id=str(uuid.uuid4()),
                    code=f"PRD-{category.code}-{i+1:03d}",
                    name=product_name,
                    category_id=category.id,
                    base_unit=config["base_unit"],
                    pricing_unit=config["base_unit"],
                    pricing_method=config["pricing_method"],
                    is_active=True,
                    is_public=True,
                    specifications=variant,
                    created_by="system",
                    updated_by="system"
                )
                session.add(product)
                
                # Create SKU
                sku_code = generate_sku_code(category.code, i+1)
                sku = ProductSKU(
                    id=str(uuid.uuid4()),
                    product_id=product.id,
                    sku_code=sku_code,
                    name=f"{product_name} - {config['base_unit']}",
                    variant=variant,
                    stock_quantity=50 if config["pricing_method"] == PricingMethod.BY_ITEM else 100,
                    min_stock=10 if config["pricing_method"] == PricingMethod.BY_ITEM else 20,
                    max_stock=200 if config["pricing_method"] == PricingMethod.BY_ITEM else 500,
                    weight=1.0 if config["pricing_method"] == PricingMethod.BY_WEIGHT else None,
                    package_type="Êï£Ë£ù" if config["pricing_method"] == PricingMethod.BY_WEIGHT else "ÂåÖË£ù",
                    shelf_life_days=7 if "Ëî¨Ëèú" in category.name or "ËÇâ" in category.name else 365,
                    storage_conditions="ÂÜ∑Ëóè" if "Ëî¨Ëèú" in category.name or "ËÇâ" in category.name else "Â∏∏Ê∫´",
                    is_active=True,
                    pricing_method=config["pricing_method"],
                    unit_price=unit_price,
                    min_order_quantity=min_qty,
                    quantity_increment=qty_increment,
                )
                session.add(sku)
                total_created += 1
                
                print(f"   ‚úÖ {product_name}: {unit_price}ÂÖÉ/{config['base_unit']} (ÊúÄÂ∞èË®ÇË≥º: {min_qty}{config['base_unit']})")
        
        # Commit all changes
        await session.commit()
        print(f"\nüéâ Successfully created {total_created} SKUs!")
        
        # Verify creation
        result = await session.execute(select(ProductSKU))
        total_skus = len(result.scalars().all())
        print(f"üìä Total SKUs in database: {total_skus}")


async def main():
    """Main execution function"""
    print("üöÄ Starting SKU data generation...")
    print("=" * 50)
    
    try:
        await create_products_and_skus()
        print("\n‚úÖ SKU generation completed successfully!")
        
        # Test API endpoint to verify
        async with httpx.AsyncClient() as client:
            try:
                response = await client.get("http://localhost:8000/api/products/skus/search?page_size=5")
                if response.status_code == 200:
                    data = response.json()
                    print(f"\nüîç API Test - Found {data.get('total', 0)} SKUs via API")
                    for sku in data.get('data', [])[:3]:
                        print(f"   - {sku['name']} ({sku['code']})")
                else:
                    print(f"‚ö†Ô∏è  API Test failed: {response.status_code}")
            except Exception as e:
                print(f"‚ö†Ô∏è  API Test error: {e}")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())