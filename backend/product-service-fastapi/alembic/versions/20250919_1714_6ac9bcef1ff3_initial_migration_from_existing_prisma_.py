"""Initial migration for product-service schema

Revision ID: 6ac9bcef1ff3
Revises: 
Create Date: 2025-09-19 17:14:01.093244

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6ac9bcef1ff3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('supplier_product_skus_skuId_idx', table_name='supplier_product_skus')
    op.drop_index('supplier_product_skus_supplierProductId_idx', table_name='supplier_product_skus')
    op.drop_index('supplier_product_skus_supplierProductId_skuId_key', table_name='supplier_product_skus')
    op.drop_table('supplier_product_skus')
    op.drop_index('inventory_logs_createdAt_idx', table_name='inventory_logs')
    op.drop_index('inventory_logs_skuId_idx', table_name='inventory_logs')
    op.drop_index('inventory_logs_type_idx', table_name='inventory_logs')
    op.drop_table('inventory_logs')
    op.drop_index('supplier_products_isActive_idx', table_name='supplier_products')
    op.drop_index('supplier_products_productId_idx', table_name='supplier_products')
    op.drop_index('supplier_products_supplierId_idx', table_name='supplier_products')
    op.drop_index('supplier_products_supplierId_productId_key', table_name='supplier_products')
    op.drop_table('supplier_products')
    op.drop_table('organizations')
    op.drop_index('file_uploads_createdAt_idx', table_name='file_uploads')
    op.drop_index('file_uploads_uploadedBy_idx', table_name='file_uploads')
    op.drop_table('file_uploads')
    op.drop_index('password_reset_tokens_expiresAt_idx', table_name='password_reset_tokens')
    op.drop_index('password_reset_tokens_token_idx', table_name='password_reset_tokens')
    op.drop_index('password_reset_tokens_token_key', table_name='password_reset_tokens')
    op.drop_index('password_reset_tokens_userId_idx', table_name='password_reset_tokens')
    op.drop_table('password_reset_tokens')
    op.drop_index('audit_logs_createdAt_idx', table_name='audit_logs')
    op.drop_index('audit_logs_entityType_entityId_idx', table_name='audit_logs')
    op.drop_index('audit_logs_userId_idx', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index('reconciliations_periodStart_periodEnd_idx', table_name='reconciliations')
    op.drop_index('reconciliations_reconciliationNumber_key', table_name='reconciliations')
    op.drop_index('reconciliations_restaurantId_supplierId_idx', table_name='reconciliations')
    op.drop_index('reconciliations_status_idx', table_name='reconciliations')
    op.drop_table('reconciliations')
    op.drop_table('reconciliation_items')
    op.drop_index('orders_deliveryDate_idx', table_name='orders')
    op.drop_index('orders_orderNumber_key', table_name='orders')
    op.drop_index('orders_restaurantId_idx', table_name='orders')
    op.drop_index('orders_status_idx', table_name='orders')
    op.drop_index('orders_supplierId_idx', table_name='orders')
    op.drop_table('orders')
    op.drop_index('mfa_verifications_code_idx', table_name='mfa_verifications')
    op.drop_index('mfa_verifications_expiresAt_idx', table_name='mfa_verifications')
    op.drop_index('mfa_verifications_userId_idx', table_name='mfa_verifications')
    op.drop_table('mfa_verifications')
    op.drop_index('erp_sync_logs_createdAt_idx', table_name='erp_sync_logs')
    op.drop_index('erp_sync_logs_organizationId_idx', table_name='erp_sync_logs')
    op.drop_index('erp_sync_logs_status_idx', table_name='erp_sync_logs')
    op.drop_index('erp_sync_logs_type_idx', table_name='erp_sync_logs')
    op.drop_table('erp_sync_logs')
    op.drop_index('product_skus_isActive_idx', table_name='product_skus')
    op.drop_index('product_skus_productId_idx', table_name='product_skus')
    op.drop_index('product_skus_skuCode_key', table_name='product_skus')
    op.drop_table('product_skus')
    op.drop_table('order_items')
    op.drop_index('notifications_createdAt_idx', table_name='notifications')
    op.drop_index('notifications_read_idx', table_name='notifications')
    op.drop_index('notifications_userId_idx', table_name='notifications')
    op.drop_table('notifications')
    op.drop_index('product_nutrition_productId_key', table_name='product_nutrition')
    op.drop_table('product_nutrition')
    op.drop_index('super_user_requests_requestedAt_idx', table_name='super_user_requests')
    op.drop_index('super_user_requests_status_idx', table_name='super_user_requests')
    op.drop_index('super_user_requests_userId_idx', table_name='super_user_requests')
    op.drop_table('super_user_requests')
    op.drop_index('product_allergens_productId_allergenType_key', table_name='product_allergens')
    op.drop_index('product_allergens_productId_idx', table_name='product_allergens')
    op.drop_table('product_allergens')
    op.drop_index('system_configs_category_idx', table_name='system_configs')
    op.drop_index('system_configs_key_key', table_name='system_configs')
    op.drop_table('system_configs')
    op.drop_index('sessions_expiresAt_idx', table_name='sessions')
    op.drop_index('sessions_refreshToken_key', table_name='sessions')
    op.drop_index('sessions_token_idx', table_name='sessions')
    op.drop_index('sessions_token_key', table_name='sessions')
    op.drop_index('sessions_userId_idx', table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('users_email_key', table_name='users')
    op.drop_table('users')
    op.drop_index('workflow_tasks_createdAt_idx', table_name='workflow_tasks')
    op.drop_index('workflow_tasks_scheduledAt_idx', table_name='workflow_tasks')
    op.drop_index('workflow_tasks_status_idx', table_name='workflow_tasks')
    op.drop_index('workflow_tasks_type_idx', table_name='workflow_tasks')
    op.drop_table('workflow_tasks')
    op.add_column('product_categories', sa.Column('name_en', sa.String(), nullable=False))
    op.add_column('product_categories', sa.Column('parent_id', sa.UUID(), nullable=True))
    op.add_column('product_categories', sa.Column('sort_order', sa.Integer(), nullable=False))
    op.add_column('product_categories', sa.Column('meta_data', sa.JSON(), nullable=False))
    op.add_column('product_categories', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('product_categories', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('product_categories', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('product_categories', 'code',
               existing_type=sa.TEXT(),
               type_=sa.String(length=4),
               existing_nullable=False)
    op.alter_column('product_categories', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('product_categories', 'level',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('product_categories', 'id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_index('product_categories_code_key', table_name='product_categories')
    op.drop_index('product_categories_isActive_idx', table_name='product_categories')
    op.drop_index('product_categories_level_idx', table_name='product_categories')
    op.drop_index('product_categories_parentId_idx', table_name='product_categories')
    op.create_index(op.f('ix_product_categories_code'), 'product_categories', ['code'], unique=True)
    op.create_unique_constraint(None, 'product_categories', ['id'])
    op.drop_constraint('product_categories_parentId_fkey', 'product_categories', type_='foreignkey')
    op.create_foreign_key(None, 'product_categories', 'product_categories', ['parent_id'], ['id'])
    op.drop_column('product_categories', 'sortOrder')
    op.drop_column('product_categories', 'nameEn')
    op.drop_column('product_categories', 'createdAt')
    op.drop_column('product_categories', 'parentId')
    op.drop_column('product_categories', 'isActive')
    op.drop_column('product_categories', 'updatedAt')
    op.drop_column('product_categories', 'metadata')
    op.add_column('products', sa.Column('supplier_id', sa.UUID(), nullable=True))
    op.add_column('products', sa.Column('category_id', sa.UUID(), nullable=False))
    op.add_column('products', sa.Column('name_en', sa.String(), nullable=True))
    op.add_column('products', sa.Column('product_state', sa.Enum('raw', 'processed', name='productstate'), nullable=False))
    op.add_column('products', sa.Column('tax_status', sa.Enum('taxable', 'tax_exempt', name='taxstatus'), nullable=False))
    op.add_column('products', sa.Column('allergen_tracking_enabled', sa.Boolean(), nullable=False))
    op.add_column('products', sa.Column('base_unit', sa.String(), nullable=False))
    op.add_column('products', sa.Column('pricing_unit', sa.String(), nullable=False))
    op.add_column('products', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('products', sa.Column('is_public', sa.Boolean(), nullable=False))
    op.add_column('products', sa.Column('safety_info', sa.JSON(), nullable=False))
    op.add_column('products', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('products', sa.Column('updated_by', sa.UUID(), nullable=True))
    op.add_column('products', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('products', sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('products', 'code',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'brand',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'origin',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'specifications',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('products', 'version',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('products', 'certifications',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('products', 'id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.drop_index('products_brand_idx', table_name='products')
    op.drop_index('products_categoryId_idx', table_name='products')
    op.drop_index('products_code_version_key', table_name='products')
    op.drop_index('products_isActive_idx', table_name='products')
    op.drop_index('products_origin_idx', table_name='products')
    op.drop_index('products_supplierId_idx', table_name='products')
    op.create_index(op.f('ix_products_code'), 'products', ['code'], unique=False)
    op.create_unique_constraint(None, 'products', ['id'])
    op.drop_constraint('products_supplierId_fkey', 'products', type_='foreignkey')
    op.drop_constraint('products_categoryId_fkey', 'products', type_='foreignkey')
    op.create_foreign_key(None, 'products', 'product_categories', ['category_id'], ['id'])
    op.drop_column('products', 'pricingUnit')
    op.drop_column('products', 'supplierId')
    op.drop_column('products', 'categoryId')
    op.drop_column('products', 'createdBy')
    op.drop_column('products', 'isPublic')
    op.drop_column('products', 'updatedBy')
    op.drop_column('products', 'allergenTrackingEnabled')
    op.drop_column('products', 'nameEn')
    op.drop_column('products', 'taxStatus')
    op.drop_column('products', 'createdAt')
    op.drop_column('products', 'safetyInfo')
    op.drop_column('products', 'isActive')
    op.drop_column('products', 'updatedAt')
    op.drop_column('products', 'productState')
    op.drop_column('products', 'baseUnit')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('products', sa.Column('baseUnit', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('productState', postgresql.ENUM('raw', 'processed', name='ProductState'), server_default=sa.text('\'raw\'::"ProductState"'), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('safetyInfo', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('taxStatus', postgresql.ENUM('taxable', 'tax_exempt', name='TaxStatus'), server_default=sa.text('\'taxable\'::"TaxStatus"'), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('nameEn', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('allergenTrackingEnabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('updatedBy', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('isPublic', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('createdBy', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('categoryId', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('products', sa.Column('supplierId', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('products', sa.Column('pricingUnit', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'products', type_='foreignkey')
    op.create_foreign_key('products_categoryId_fkey', 'products', 'product_categories', ['categoryId'], ['id'], onupdate='CASCADE', ondelete='RESTRICT')
    op.create_foreign_key('products_supplierId_fkey', 'products', 'organizations', ['supplierId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'products', type_='unique')
    op.drop_index(op.f('ix_products_code'), table_name='products')
    op.create_index('products_supplierId_idx', 'products', ['supplierId'], unique=False)
    op.create_index('products_origin_idx', 'products', ['origin'], unique=False)
    op.create_index('products_isActive_idx', 'products', ['isActive'], unique=False)
    op.create_index('products_code_version_key', 'products', ['code', 'version'], unique=True)
    op.create_index('products_categoryId_idx', 'products', ['categoryId'], unique=False)
    op.create_index('products_brand_idx', 'products', ['brand'], unique=False)
    op.alter_column('products', 'id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'certifications',
               existing_type=sa.JSON(),
               server_default=sa.text("'[]'::jsonb"),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('products', 'version',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1'),
               existing_nullable=False)
    op.alter_column('products', 'specifications',
               existing_type=sa.JSON(),
               server_default=sa.text("'{}'::jsonb"),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('products', 'origin',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'brand',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'code',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('products', 'updated_at')
    op.drop_column('products', 'created_at')
    op.drop_column('products', 'updated_by')
    op.drop_column('products', 'created_by')
    op.drop_column('products', 'safety_info')
    op.drop_column('products', 'is_public')
    op.drop_column('products', 'is_active')
    op.drop_column('products', 'pricing_unit')
    op.drop_column('products', 'base_unit')
    op.drop_column('products', 'allergen_tracking_enabled')
    op.drop_column('products', 'tax_status')
    op.drop_column('products', 'product_state')
    op.drop_column('products', 'name_en')
    op.drop_column('products', 'category_id')
    op.drop_column('products', 'supplier_id')
    op.add_column('product_categories', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('product_categories', sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False))
    op.add_column('product_categories', sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('product_categories', sa.Column('parentId', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('product_categories', sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False))
    op.add_column('product_categories', sa.Column('nameEn', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('product_categories', sa.Column('sortOrder', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'product_categories', type_='foreignkey')
    op.create_foreign_key('product_categories_parentId_fkey', 'product_categories', 'product_categories', ['parentId'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_constraint(None, 'product_categories', type_='unique')
    op.drop_index(op.f('ix_product_categories_code'), table_name='product_categories')
    op.create_index('product_categories_parentId_idx', 'product_categories', ['parentId'], unique=False)
    op.create_index('product_categories_level_idx', 'product_categories', ['level'], unique=False)
    op.create_index('product_categories_isActive_idx', 'product_categories', ['isActive'], unique=False)
    op.create_index('product_categories_code_key', 'product_categories', ['code'], unique=True)
    op.alter_column('product_categories', 'id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('product_categories', 'level',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1'),
               existing_nullable=False)
    op.alter_column('product_categories', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('product_categories', 'code',
               existing_type=sa.String(length=4),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('product_categories', 'updated_at')
    op.drop_column('product_categories', 'created_at')
    op.drop_column('product_categories', 'is_active')
    op.drop_column('product_categories', 'meta_data')
    op.drop_column('product_categories', 'sort_order')
    op.drop_column('product_categories', 'parent_id')
    op.drop_column('product_categories', 'name_en')
    op.create_table('workflow_tasks',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'running', 'completed', 'failed', 'cancelled', name='WorkflowStatus'), server_default=sa.text('\'pending\'::"WorkflowStatus"'), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('maxAttempts', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('scheduledAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('startedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('completedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='workflow_tasks_pkey')
    )
    op.create_index('workflow_tasks_type_idx', 'workflow_tasks', ['type'], unique=False)
    op.create_index('workflow_tasks_status_idx', 'workflow_tasks', ['status'], unique=False)
    op.create_index('workflow_tasks_scheduledAt_idx', 'workflow_tasks', ['scheduledAt'], unique=False)
    op.create_index('workflow_tasks_createdAt_idx', 'workflow_tasks', ['createdAt'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('passwordHash', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organizationId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('restaurant_admin', 'restaurant_manager', 'restaurant_operator', 'supplier_admin', 'supplier_manager', 'platform_admin', name='UserRole'), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastLoginAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('tokenVersion', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('isSuperUser', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('superUserExpiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('superUserReason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emailVerified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('emailVerifiedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('emailVerificationToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('phoneVerified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('phoneVerifiedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('businessVerified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('businessVerifiedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('businessDocuments', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('mfaEnabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('mfaSecret', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mfaBackupCodes', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('mfaMethod', postgresql.ENUM('none', 'totp', 'sms', 'email', name='MFAMethod'), server_default=sa.text('\'none\'::"MFAMethod"'), autoincrement=False, nullable=False),
    sa.Column('failedLoginAttempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('lockedUntil', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('lastPasswordChange', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('passwordHistory', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('maxSessions', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organizationId'], ['organizations.id'], name='users_organizationId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('users_email_key', 'users', ['email'], unique=True)
    op.create_table('sessions',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refreshToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deviceInfo', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('isTrusted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('lastActivity', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='sessions_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey')
    )
    op.create_index('sessions_userId_idx', 'sessions', ['userId'], unique=False)
    op.create_index('sessions_token_key', 'sessions', ['token'], unique=True)
    op.create_index('sessions_token_idx', 'sessions', ['token'], unique=False)
    op.create_index('sessions_refreshToken_key', 'sessions', ['refreshToken'], unique=True)
    op.create_index('sessions_expiresAt_idx', 'sessions', ['expiresAt'], unique=False)
    op.create_table('system_configs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), server_default=sa.text("'general'::text"), autoincrement=False, nullable=False),
    sa.Column('updatedBy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='system_configs_pkey')
    )
    op.create_index('system_configs_key_key', 'system_configs', ['key'], unique=True)
    op.create_index('system_configs_category_idx', 'system_configs', ['category'], unique=False)
    op.create_table('product_allergens',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('allergenType', postgresql.ENUM('gluten', 'crustacean', 'egg', 'fish', 'peanut', 'soy', 'milk', 'nuts', 'celery', 'mustard', 'sesame', 'sulfur', 'lupin', 'mollusks', name='AllergenType'), autoincrement=False, nullable=False),
    sa.Column('severity', postgresql.ENUM('low', 'medium', 'high', 'severe', name='AllergenSeverity'), server_default=sa.text('\'medium\'::"AllergenSeverity"'), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name='product_allergens_productId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='product_allergens_pkey')
    )
    op.create_index('product_allergens_productId_idx', 'product_allergens', ['productId'], unique=False)
    op.create_index('product_allergens_productId_allergenType_key', 'product_allergens', ['productId', 'allergenType'], unique=True)
    op.create_table('super_user_requests',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected', 'expired', 'revoked', name='SuperUserRequestStatus'), server_default=sa.text('\'pending\'::"SuperUserRequestStatus"'), autoincrement=False, nullable=False),
    sa.Column('requestedAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('approvedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('rejectedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('approvedBy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rejectedBy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='super_user_requests_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='super_user_requests_pkey')
    )
    op.create_index('super_user_requests_userId_idx', 'super_user_requests', ['userId'], unique=False)
    op.create_index('super_user_requests_status_idx', 'super_user_requests', ['status'], unique=False)
    op.create_index('super_user_requests_requestedAt_idx', 'super_user_requests', ['requestedAt'], unique=False)
    op.create_table('product_nutrition',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('servingSize', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('servingUnit', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('calories', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('protein', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('saturatedFat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('carbohydrates', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sugars', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fiber', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sodium', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('additionalNutrients', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('nutritionClaims', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name='product_nutrition_productId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='product_nutrition_pkey')
    )
    op.create_index('product_nutrition_productId_key', 'product_nutrition', ['productId'], unique=True)
    op.create_table('notifications',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('order_confirmed', 'order_shipped', 'order_delivered', 'reconciliation_ready', 'discrepancy_found', 'payment_due', 'erp_sync_error', 'system_maintenance', name='NotificationType'), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('readAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('priority', postgresql.ENUM('low', 'medium', 'high', 'urgent', name='NotificationPriority'), server_default=sa.text('\'medium\'::"NotificationPriority"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='notifications_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_index('notifications_userId_idx', 'notifications', ['userId'], unique=False)
    op.create_index('notifications_read_idx', 'notifications', ['read'], unique=False)
    op.create_index('notifications_createdAt_idx', 'notifications', ['createdAt'], unique=False)
    op.create_table('order_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('orderId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productName', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.Column('unitPrice', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=False),
    sa.Column('lineTotal', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['orderId'], ['orders.id'], name='order_items_orderId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name='order_items_productId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='order_items_pkey')
    )
    op.create_table('product_skus',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('skuCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variant', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('stockQuantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('reservedQuantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('minStock', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('maxStock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('packageType', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('shelfLifeDays', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('storageConditions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('batchTrackingEnabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name='product_skus_productId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='product_skus_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('product_skus_skuCode_key', 'product_skus', ['skuCode'], unique=True)
    op.create_index('product_skus_productId_idx', 'product_skus', ['productId'], unique=False)
    op.create_index('product_skus_isActive_idx', 'product_skus', ['isActive'], unique=False)
    op.create_table('erp_sync_logs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('organizationId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('success', 'error', 'partial', name='ERPSyncStatus'), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('recordsProcessed', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organizationId'], ['organizations.id'], name='erp_sync_logs_organizationId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='erp_sync_logs_pkey')
    )
    op.create_index('erp_sync_logs_type_idx', 'erp_sync_logs', ['type'], unique=False)
    op.create_index('erp_sync_logs_status_idx', 'erp_sync_logs', ['status'], unique=False)
    op.create_index('erp_sync_logs_organizationId_idx', 'erp_sync_logs', ['organizationId'], unique=False)
    op.create_index('erp_sync_logs_createdAt_idx', 'erp_sync_logs', ['createdAt'], unique=False)
    op.create_table('mfa_verifications',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('method', postgresql.ENUM('none', 'totp', 'sms', 'email', name='MFAMethod'), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('maxAttempts', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('verifiedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='mfa_verifications_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='mfa_verifications_pkey')
    )
    op.create_index('mfa_verifications_userId_idx', 'mfa_verifications', ['userId'], unique=False)
    op.create_index('mfa_verifications_expiresAt_idx', 'mfa_verifications', ['expiresAt'], unique=False)
    op.create_index('mfa_verifications_code_idx', 'mfa_verifications', ['code'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('orderNumber', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('restaurantId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'submitted', 'confirmed', 'preparing', 'shipped', 'delivered', 'accepted', 'completed', 'cancelled', name='OrderStatus'), server_default=sa.text('\'draft\'::"OrderStatus"'), autoincrement=False, nullable=False),
    sa.Column('subtotal', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('taxAmount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('totalAmount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('deliveryDate', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('deliveryAddress', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('adjustments', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('createdBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['createdBy'], ['users.id'], name='orders_createdBy_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['restaurantId'], ['organizations.id'], name='orders_restaurantId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplierId'], ['organizations.id'], name='orders_supplierId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='orders_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('orders_supplierId_idx', 'orders', ['supplierId'], unique=False)
    op.create_index('orders_status_idx', 'orders', ['status'], unique=False)
    op.create_index('orders_restaurantId_idx', 'orders', ['restaurantId'], unique=False)
    op.create_index('orders_orderNumber_key', 'orders', ['orderNumber'], unique=True)
    op.create_index('orders_deliveryDate_idx', 'orders', ['deliveryDate'], unique=False)
    op.create_table('reconciliation_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reconciliationId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('orderId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('orderedQuantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.Column('deliveredQuantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.Column('acceptedQuantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.Column('unitPrice', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=False),
    sa.Column('lineTotal', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('discrepancyType', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discrepancyAmount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('resolutionAction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['orderId'], ['orders.id'], name='reconciliation_items_orderId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['reconciliationId'], ['reconciliations.id'], name='reconciliation_items_reconciliationId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='reconciliation_items_pkey')
    )
    op.create_table('reconciliations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reconciliationNumber', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('periodStart', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('periodEnd', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('restaurantId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'processing', 'review_required', 'approved', 'disputed', 'resolved', name='ReconciliationStatus'), server_default=sa.text('\'pending\'::"ReconciliationStatus"'), autoincrement=False, nullable=False),
    sa.Column('summary', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('discrepancies', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('resolution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidenceScore', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('autoApproved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('createdBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('approvedBy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('approvedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['approvedBy'], ['users.id'], name='reconciliations_approvedBy_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['createdBy'], ['users.id'], name='reconciliations_createdBy_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['restaurantId'], ['organizations.id'], name='reconciliations_restaurantId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplierId'], ['organizations.id'], name='reconciliations_supplierId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='reconciliations_pkey')
    )
    op.create_index('reconciliations_status_idx', 'reconciliations', ['status'], unique=False)
    op.create_index('reconciliations_restaurantId_supplierId_idx', 'reconciliations', ['restaurantId', 'supplierId'], unique=False)
    op.create_index('reconciliations_reconciliationNumber_key', 'reconciliations', ['reconciliationNumber'], unique=True)
    op.create_index('reconciliations_periodStart_periodEnd_idx', 'reconciliations', ['periodStart', 'periodEnd'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('entityType', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('entityId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='audit_logs_userId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_index('audit_logs_userId_idx', 'audit_logs', ['userId'], unique=False)
    op.create_index('audit_logs_entityType_entityId_idx', 'audit_logs', ['entityType', 'entityId'], unique=False)
    op.create_index('audit_logs_createdAt_idx', 'audit_logs', ['createdAt'], unique=False)
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('used', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('usedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='password_reset_tokens_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='password_reset_tokens_pkey')
    )
    op.create_index('password_reset_tokens_userId_idx', 'password_reset_tokens', ['userId'], unique=False)
    op.create_index('password_reset_tokens_token_key', 'password_reset_tokens', ['token'], unique=True)
    op.create_index('password_reset_tokens_token_idx', 'password_reset_tokens', ['token'], unique=False)
    op.create_index('password_reset_tokens_expiresAt_idx', 'password_reset_tokens', ['expiresAt'], unique=False)
    op.create_table('file_uploads',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('originalName', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('mimetype', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uploadedBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='file_uploads_pkey')
    )
    op.create_index('file_uploads_uploadedBy_idx', 'file_uploads', ['uploadedBy'], unique=False)
    op.create_index('file_uploads_createdAt_idx', 'file_uploads', ['createdAt'], unique=False)
    op.create_table('organizations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('restaurant', 'supplier', name='OrganizationType'), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('supplier_products',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierProductCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierName', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('leadTime', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('minOrderQty', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('maxOrderQty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pricing', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('isPreferred', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('qualityGrade', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qualityNotes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name='supplier_products_productId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplierId'], ['organizations.id'], name='supplier_products_supplierId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supplier_products_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('supplier_products_supplierId_productId_key', 'supplier_products', ['supplierId', 'productId'], unique=True)
    op.create_index('supplier_products_supplierId_idx', 'supplier_products', ['supplierId'], unique=False)
    op.create_index('supplier_products_productId_idx', 'supplier_products', ['productId'], unique=False)
    op.create_index('supplier_products_isActive_idx', 'supplier_products', ['isActive'], unique=False)
    op.create_table('inventory_logs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('skuId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('purchase', 'sale', 'adjustment', 'waste', 'return', 'transfer', name='InventoryTransactionType'), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('referenceId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('beforeQty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('afterQty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('operatorId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['skuId'], ['product_skus.id'], name='inventory_logs_skuId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='inventory_logs_pkey')
    )
    op.create_index('inventory_logs_type_idx', 'inventory_logs', ['type'], unique=False)
    op.create_index('inventory_logs_skuId_idx', 'inventory_logs', ['skuId'], unique=False)
    op.create_index('inventory_logs_createdAt_idx', 'inventory_logs', ['createdAt'], unique=False)
    op.create_table('supplier_product_skus',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierProductId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('skuId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierSkuCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('unitPrice', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('priceUnit', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('priceValidFrom', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('priceValidTo', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('isAvailable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('stockStatus', postgresql.ENUM('in_stock', 'low_stock', 'out_of_stock', 'discontinued', name='StockStatus'), server_default=sa.text('\'in_stock\'::"StockStatus"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['skuId'], ['product_skus.id'], name='supplier_product_skus_skuId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplierProductId'], ['supplier_products.id'], name='supplier_product_skus_supplierProductId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supplier_product_skus_pkey')
    )
    op.create_index('supplier_product_skus_supplierProductId_skuId_key', 'supplier_product_skus', ['supplierProductId', 'skuId'], unique=True)
    op.create_index('supplier_product_skus_supplierProductId_idx', 'supplier_product_skus', ['supplierProductId'], unique=False)
    op.create_index('supplier_product_skus_skuId_idx', 'supplier_product_skus', ['skuId'], unique=False)
    # ### end Alembic commands ###
