"""fix column naming consistency snake_case

Revision ID: c7037736e98e
Revises: eee366349101
Create Date: 2025-09-19 23:38:28.330269

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c7037736e98e'
down_revision = 'eee366349101'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('supplier_skus',
    sa.Column('sku_id', sa.String(), nullable=False),
    sa.Column('supplier_id', sa.String(), nullable=False),
    sa.Column('supplier_sku_code', sa.String(), nullable=False),
    sa.Column('supplier_name_for_product', sa.String(), nullable=True),
    sa.Column('supplier_price', sa.Numeric(precision=10, scale=4), nullable=False),
    sa.Column('bulk_discount_threshold', sa.Integer(), nullable=True),
    sa.Column('bulk_discount_rate', sa.Numeric(precision=5, scale=4), nullable=True),
    sa.Column('pricing_tiers', sa.JSON(), nullable=False),
    sa.Column('lead_time_days', sa.Integer(), nullable=False),
    sa.Column('minimum_order_quantity', sa.Integer(), nullable=False),
    sa.Column('availability_status', sa.String(), nullable=False),
    sa.Column('supplier_quality_grade', sa.String(), nullable=True),
    sa.Column('certifications', sa.JSON(), nullable=False),
    sa.Column('contract_start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('contract_end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_preferred', sa.Boolean(), nullable=False),
    sa.Column('quality_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('delivery_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('service_score', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('createdAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updatedAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['sku_id'], ['product_skus.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    comment='Multi-supplier SKU mapping with differential pricing'
    )
    op.drop_index('audit_logs_createdAt_idx', table_name='audit_logs')
    op.drop_index('audit_logs_entityType_entityId_idx', table_name='audit_logs')
    op.drop_index('audit_logs_userId_idx', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index('orders_deliveryDate_idx', table_name='orders')
    op.drop_index('orders_orderNumber_key', table_name='orders')
    op.drop_index('orders_restaurantId_idx', table_name='orders')
    op.drop_index('orders_status_idx', table_name='orders')
    op.drop_index('orders_supplierId_idx', table_name='orders')
    op.drop_table('orders')
    op.drop_index('system_configs_category_idx', table_name='system_configs')
    op.drop_index('system_configs_key_key', table_name='system_configs')
    op.drop_table('system_configs')
    op.drop_index('supplier_product_skus_skuId_idx', table_name='supplier_product_skus')
    op.drop_index('supplier_product_skus_supplierProductId_idx', table_name='supplier_product_skus')
    op.drop_index('supplier_product_skus_supplierProductId_skuId_key', table_name='supplier_product_skus')
    op.drop_table('supplier_product_skus')
    op.drop_index('password_reset_tokens_expiresAt_idx', table_name='password_reset_tokens')
    op.drop_index('password_reset_tokens_token_idx', table_name='password_reset_tokens')
    op.drop_index('password_reset_tokens_token_key', table_name='password_reset_tokens')
    op.drop_index('password_reset_tokens_userId_idx', table_name='password_reset_tokens')
    op.drop_table('password_reset_tokens')
    op.drop_table('order_items')
    op.drop_index('workflow_tasks_createdAt_idx', table_name='workflow_tasks')
    op.drop_index('workflow_tasks_scheduledAt_idx', table_name='workflow_tasks')
    op.drop_index('workflow_tasks_status_idx', table_name='workflow_tasks')
    op.drop_index('workflow_tasks_type_idx', table_name='workflow_tasks')
    op.drop_table('workflow_tasks')
    op.drop_index('super_user_requests_requestedAt_idx', table_name='super_user_requests')
    op.drop_index('super_user_requests_status_idx', table_name='super_user_requests')
    op.drop_index('super_user_requests_userId_idx', table_name='super_user_requests')
    op.drop_table('super_user_requests')
    op.drop_index('reconciliations_periodStart_periodEnd_idx', table_name='reconciliations')
    op.drop_index('reconciliations_reconciliationNumber_key', table_name='reconciliations')
    op.drop_index('reconciliations_restaurantId_supplierId_idx', table_name='reconciliations')
    op.drop_index('reconciliations_status_idx', table_name='reconciliations')
    op.drop_table('reconciliations')
    op.drop_table('reconciliation_items')
    op.drop_index('file_uploads_createdAt_idx', table_name='file_uploads')
    op.drop_index('file_uploads_uploadedBy_idx', table_name='file_uploads')
    op.drop_table('file_uploads')
    op.drop_index('users_email_key', table_name='users')
    op.drop_table('users')
    op.drop_index('mfa_verifications_code_idx', table_name='mfa_verifications')
    op.drop_index('mfa_verifications_expiresAt_idx', table_name='mfa_verifications')
    op.drop_index('mfa_verifications_userId_idx', table_name='mfa_verifications')
    op.drop_table('mfa_verifications')
    op.drop_index('notifications_createdAt_idx', table_name='notifications')
    op.drop_index('notifications_read_idx', table_name='notifications')
    op.drop_index('notifications_userId_idx', table_name='notifications')
    op.drop_table('notifications')
    op.drop_table('organizations')
    op.drop_index('inventory_logs_createdAt_idx', table_name='inventory_logs')
    op.drop_index('inventory_logs_skuId_idx', table_name='inventory_logs')
    op.drop_index('inventory_logs_type_idx', table_name='inventory_logs')
    op.drop_table('inventory_logs')
    op.drop_index('supplier_products_isActive_idx', table_name='supplier_products')
    op.drop_index('supplier_products_productId_idx', table_name='supplier_products')
    op.drop_index('supplier_products_supplierId_idx', table_name='supplier_products')
    op.drop_index('supplier_products_supplierId_productId_key', table_name='supplier_products')
    op.drop_table('supplier_products')
    op.drop_index('sessions_expiresAt_idx', table_name='sessions')
    op.drop_index('sessions_refreshToken_key', table_name='sessions')
    op.drop_index('sessions_token_idx', table_name='sessions')
    op.drop_index('sessions_token_key', table_name='sessions')
    op.drop_index('sessions_userId_idx', table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('erp_sync_logs_createdAt_idx', table_name='erp_sync_logs')
    op.drop_index('erp_sync_logs_organizationId_idx', table_name='erp_sync_logs')
    op.drop_index('erp_sync_logs_status_idx', table_name='erp_sync_logs')
    op.drop_index('erp_sync_logs_type_idx', table_name='erp_sync_logs')
    op.drop_table('erp_sync_logs')
    op.add_column('product_allergens', sa.Column('sku_id', sa.String(), nullable=False))
    op.add_column('product_allergens', sa.Column('allergen_type', sa.Enum('gluten', 'crustaceans', 'eggs', 'fish', 'peanuts', 'soybeans', 'dairy', 'nuts', 'celery', 'mustard', 'sesame', 'sulfites', 'lupin', 'molluscs', name='allergentype'), nullable=False))
    op.add_column('product_allergens', sa.Column('risk_level', sa.Enum('none', 'low', 'medium', 'high', name='allergenrisklevel'), nullable=False))
    op.add_column('product_allergens', sa.Column('source', sa.String(), nullable=True))
    op.add_column('product_allergens', sa.Column('cross_contamination_risk', sa.Boolean(), nullable=False))
    op.add_column('product_allergens', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('product_allergens', sa.Column('created_by', sa.String(), nullable=True))
    op.add_column('product_allergens', sa.Column('updatedAt', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('product_allergens', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('product_allergens', 'createdAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('product_allergens_productId_allergenType_key', table_name='product_allergens')
    op.drop_index('product_allergens_productId_idx', table_name='product_allergens')
    op.create_unique_constraint(None, 'product_allergens', ['id'])
    op.drop_constraint('product_allergens_productId_fkey', 'product_allergens', type_='foreignkey')
    op.create_foreign_key(None, 'product_allergens', 'product_skus', ['sku_id'], ['id'])
    op.create_table_comment(
        'product_allergens',
        'Product allergen tracking with risk levels',
        existing_comment=None,
        schema=None
    )
    op.drop_column('product_allergens', 'productId')
    op.drop_column('product_allergens', 'severity')
    op.drop_column('product_allergens', 'allergenType')
    op.drop_column('product_allergens', 'isActive')
    op.alter_column('product_categories', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('product_categories', 'code',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('product_categories', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('product_categories', 'nameEn',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('product_categories', 'parentId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('product_categories', 'level',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('product_categories', 'sortOrder',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('product_categories', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('product_categories', 'isActive',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('product_categories', 'createdAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_categories', 'updatedAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('product_categories_code_key', table_name='product_categories')
    op.drop_index('product_categories_isActive_idx', table_name='product_categories')
    op.drop_index('product_categories_level_idx', table_name='product_categories')
    op.drop_index('product_categories_parentId_idx', table_name='product_categories')
    op.create_index(op.f('ix_product_categories_code'), 'product_categories', ['code'], unique=True)
    op.drop_constraint('product_categories_parentId_fkey', 'product_categories', type_='foreignkey')
    op.create_foreign_key(None, 'product_categories', 'product_categories', ['parentId'], ['id'])
    op.add_column('product_nutrition', sa.Column('product_id', sa.String(), nullable=False))
    op.add_column('product_nutrition', sa.Column('calories_per_100g', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('protein_g', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('fat_g', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('carbs_g', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('fiber_g', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('sugar_g', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('sodium_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('calcium_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('iron_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('vitamin_c_mg', sa.Numeric(precision=8, scale=2), nullable=True))
    op.add_column('product_nutrition', sa.Column('nutrition_claims', sa.JSON(), nullable=False))
    op.add_column('product_nutrition', sa.Column('is_verified', sa.Boolean(), nullable=False))
    op.add_column('product_nutrition', sa.Column('verified_by', sa.String(), nullable=True))
    op.add_column('product_nutrition', sa.Column('verified_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('product_nutrition', sa.Column('data_source', sa.String(), nullable=True))
    op.add_column('product_nutrition', sa.Column('lab_report_url', sa.String(), nullable=True))
    op.add_column('product_nutrition', sa.Column('created_by', sa.String(), nullable=True))
    op.add_column('product_nutrition', sa.Column('updated_by', sa.String(), nullable=True))
    op.alter_column('product_nutrition', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('product_nutrition', 'createdAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_nutrition', 'updatedAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('product_nutrition_productId_key', table_name='product_nutrition')
    op.create_unique_constraint(None, 'product_nutrition', ['id'])
    op.drop_constraint('product_nutrition_productId_fkey', 'product_nutrition', type_='foreignkey')
    op.create_foreign_key(None, 'product_nutrition', 'products', ['product_id'], ['id'])
    op.drop_column('product_nutrition', 'nutritionClaims')
    op.drop_column('product_nutrition', 'sugars')
    op.drop_column('product_nutrition', 'servingUnit')
    op.drop_column('product_nutrition', 'productId')
    op.drop_column('product_nutrition', 'servingSize')
    op.drop_column('product_nutrition', 'carbohydrates')
    op.drop_column('product_nutrition', 'protein')
    op.drop_column('product_nutrition', 'saturatedFat')
    op.drop_column('product_nutrition', 'fiber')
    op.drop_column('product_nutrition', 'sodium')
    op.drop_column('product_nutrition', 'additionalNutrients')
    op.drop_column('product_nutrition', 'calories')
    op.drop_column('product_nutrition', 'fat')
    op.add_column('product_skus', sa.Column('sku_code', sa.String(), nullable=False))
    op.add_column('product_skus', sa.Column('product_id', sa.String(), nullable=False))
    op.add_column('product_skus', sa.Column('packaging_type', sa.Enum('bulk', 'bag_500g', 'bag_1kg', 'box_5kg', 'custom', name='packagingtype'), nullable=False))
    op.add_column('product_skus', sa.Column('packaging_size', sa.String(), nullable=True))
    op.add_column('product_skus', sa.Column('quality_grade', sa.Enum('grade_a', 'grade_b', 'processing', name='qualitygrade'), nullable=False))
    op.add_column('product_skus', sa.Column('processing_method', sa.Enum('raw', 'washed', 'cut', 'frozen', name='processingmethod'), nullable=False))
    op.add_column('product_skus', sa.Column('packaging_material', sa.Enum('vacuum', 'fresh_box', 'cardboard', 'plastic_bag', name='packagingmaterial'), nullable=False))
    op.add_column('product_skus', sa.Column('base_price', sa.Numeric(precision=10, scale=4), nullable=False))
    op.add_column('product_skus', sa.Column('pricing_unit', sa.String(), nullable=False))
    op.add_column('product_skus', sa.Column('origin_country', sa.String(), nullable=True))
    op.add_column('product_skus', sa.Column('origin_region', sa.String(), nullable=True))
    op.add_column('product_skus', sa.Column('weight_grams', sa.Integer(), nullable=True))
    op.add_column('product_skus', sa.Column('minimum_order_quantity', sa.Integer(), nullable=False))
    op.add_column('product_skus', sa.Column('batch_number', sa.String(), nullable=True))
    op.add_column('product_skus', sa.Column('expiry_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('product_skus', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('product_skus', sa.Column('notes', sa.Text(), nullable=True))
    op.add_column('product_skus', sa.Column('meta_data', sa.JSON(), nullable=False))
    op.add_column('product_skus', sa.Column('created_by', sa.String(), nullable=True))
    op.add_column('product_skus', sa.Column('updated_by', sa.String(), nullable=True))
    op.alter_column('product_skus', 'dimensions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               nullable=False)
    op.alter_column('product_skus', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('product_skus', 'createdAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_skus', 'updatedAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('product_skus_isActive_idx', table_name='product_skus')
    op.drop_index('product_skus_productId_idx', table_name='product_skus')
    op.drop_index('product_skus_skuCode_key', table_name='product_skus')
    op.create_index(op.f('ix_product_skus_sku_code'), 'product_skus', ['sku_code'], unique=True)
    op.create_unique_constraint(None, 'product_skus', ['id'])
    op.drop_constraint('product_skus_productId_fkey', 'product_skus', type_='foreignkey')
    op.create_foreign_key(None, 'product_skus', 'products', ['product_id'], ['id'])
    op.drop_column('product_skus', 'skuCode')
    op.drop_column('product_skus', 'stockQuantity')
    op.drop_column('product_skus', 'variant')
    op.drop_column('product_skus', 'minStock')
    op.drop_column('product_skus', 'isActive')
    op.drop_column('product_skus', 'pricingUnit')
    op.drop_column('product_skus', 'storageConditions')
    op.drop_column('product_skus', 'productId')
    op.drop_column('product_skus', 'batchTrackingEnabled')
    op.drop_column('product_skus', 'name')
    op.drop_column('product_skus', 'originRegion')
    op.drop_column('product_skus', 'packageType')
    op.drop_column('product_skus', 'weight')
    op.drop_column('product_skus', 'shelfLifeDays')
    op.drop_column('product_skus', 'reservedQuantity')
    op.drop_column('product_skus', 'maxStock')
    op.drop_column('product_skus', 'originCountry')
    op.alter_column('products', 'supplierId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'categoryId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'code',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'nameEn',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'brand',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'origin',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'productState',
               existing_type=postgresql.ENUM('raw', 'processed', name='ProductState'),
               server_default=None,
               existing_nullable=False)
    op.alter_column('products', 'taxStatus',
               existing_type=postgresql.ENUM('taxable', 'tax_exempt', name='TaxStatus'),
               server_default=None,
               existing_nullable=False)
    op.alter_column('products', 'allergenTrackingEnabled',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('products', 'baseUnit',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'pricingUnit',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'specifications',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('products', 'version',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('products', 'isActive',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('products', 'isPublic',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('products', 'certifications',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('products', 'safetyInfo',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               type_=sa.JSON(),
               existing_nullable=False)
    op.alter_column('products', 'createdBy',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'updatedBy',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('products', 'createdAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('products', 'updatedAt',
               existing_type=postgresql.TIMESTAMP(precision=3),
               server_default=sa.text('now()'),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_index('products_brand_idx', table_name='products')
    op.drop_index('products_categoryId_idx', table_name='products')
    op.drop_index('products_code_version_key', table_name='products')
    op.drop_index('products_isActive_idx', table_name='products')
    op.drop_index('products_origin_idx', table_name='products')
    op.drop_index('products_supplierId_idx', table_name='products')
    op.create_index(op.f('ix_products_code'), 'products', ['code'], unique=False)
    op.create_unique_constraint(None, 'products', ['id'])
    op.drop_constraint('products_supplierId_fkey', 'products', type_='foreignkey')
    op.drop_constraint('products_categoryId_fkey', 'products', type_='foreignkey')
    op.create_foreign_key(None, 'products', 'product_categories', ['categoryId'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'products', type_='foreignkey')
    op.create_foreign_key('products_categoryId_fkey', 'products', 'product_categories', ['categoryId'], ['id'], onupdate='CASCADE', ondelete='RESTRICT')
    op.create_foreign_key('products_supplierId_fkey', 'products', 'organizations', ['supplierId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'products', type_='unique')
    op.drop_index(op.f('ix_products_code'), table_name='products')
    op.create_index('products_supplierId_idx', 'products', ['supplierId'], unique=False)
    op.create_index('products_origin_idx', 'products', ['origin'], unique=False)
    op.create_index('products_isActive_idx', 'products', ['isActive'], unique=False)
    op.create_index('products_code_version_key', 'products', ['code', 'version'], unique=True)
    op.create_index('products_categoryId_idx', 'products', ['categoryId'], unique=False)
    op.create_index('products_brand_idx', 'products', ['brand'], unique=False)
    op.alter_column('products', 'updatedAt',
               existing_type=sa.DateTime(timezone=True),
               server_default=None,
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('products', 'createdAt',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('products', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'updatedBy',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'createdBy',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'safetyInfo',
               existing_type=sa.JSON(),
               server_default=sa.text("'{}'::jsonb"),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('products', 'certifications',
               existing_type=sa.JSON(),
               server_default=sa.text("'[]'::jsonb"),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('products', 'isPublic',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('products', 'isActive',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('products', 'version',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1'),
               existing_nullable=False)
    op.alter_column('products', 'specifications',
               existing_type=sa.JSON(),
               server_default=sa.text("'{}'::jsonb"),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('products', 'pricingUnit',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'baseUnit',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'allergenTrackingEnabled',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('products', 'taxStatus',
               existing_type=postgresql.ENUM('taxable', 'tax_exempt', name='TaxStatus'),
               server_default=sa.text('\'taxable\'::"TaxStatus"'),
               existing_nullable=False)
    op.alter_column('products', 'productState',
               existing_type=postgresql.ENUM('raw', 'processed', name='ProductState'),
               server_default=sa.text('\'raw\'::"ProductState"'),
               existing_nullable=False)
    op.alter_column('products', 'origin',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'brand',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'nameEn',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('products', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'code',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'categoryId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('products', 'supplierId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.add_column('product_skus', sa.Column('originCountry', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('product_skus', sa.Column('maxStock', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('product_skus', sa.Column('reservedQuantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('shelfLifeDays', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('product_skus', sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_skus', sa.Column('packageType', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('product_skus', sa.Column('originRegion', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('product_skus', sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('batchTrackingEnabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('storageConditions', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('product_skus', sa.Column('pricingUnit', sa.VARCHAR(), server_default=sa.text("'kg'::character varying"), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('minStock', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('variant', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('stockQuantity', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False))
    op.add_column('product_skus', sa.Column('skuCode', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'product_skus', type_='foreignkey')
    op.create_foreign_key('product_skus_productId_fkey', 'product_skus', 'products', ['productId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'product_skus', type_='unique')
    op.drop_index(op.f('ix_product_skus_sku_code'), table_name='product_skus')
    op.create_index('product_skus_skuCode_key', 'product_skus', ['skuCode'], unique=True)
    op.create_index('product_skus_productId_idx', 'product_skus', ['productId'], unique=False)
    op.create_index('product_skus_isActive_idx', 'product_skus', ['isActive'], unique=False)
    op.alter_column('product_skus', 'updatedAt',
               existing_type=sa.DateTime(timezone=True),
               server_default=None,
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('product_skus', 'createdAt',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_skus', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('product_skus', 'dimensions',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.drop_column('product_skus', 'updated_by')
    op.drop_column('product_skus', 'created_by')
    op.drop_column('product_skus', 'meta_data')
    op.drop_column('product_skus', 'notes')
    op.drop_column('product_skus', 'is_active')
    op.drop_column('product_skus', 'expiry_date')
    op.drop_column('product_skus', 'batch_number')
    op.drop_column('product_skus', 'minimum_order_quantity')
    op.drop_column('product_skus', 'weight_grams')
    op.drop_column('product_skus', 'origin_region')
    op.drop_column('product_skus', 'origin_country')
    op.drop_column('product_skus', 'pricing_unit')
    op.drop_column('product_skus', 'base_price')
    op.drop_column('product_skus', 'packaging_material')
    op.drop_column('product_skus', 'processing_method')
    op.drop_column('product_skus', 'quality_grade')
    op.drop_column('product_skus', 'packaging_size')
    op.drop_column('product_skus', 'packaging_type')
    op.drop_column('product_skus', 'product_id')
    op.drop_column('product_skus', 'sku_code')
    op.add_column('product_nutrition', sa.Column('fat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('calories', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('additionalNutrients', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False))
    op.add_column('product_nutrition', sa.Column('sodium', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('fiber', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('saturatedFat', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('protein', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('carbohydrates', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('servingSize', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('product_nutrition', sa.Column('servingUnit', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('sugars', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('product_nutrition', sa.Column('nutritionClaims', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'product_nutrition', type_='foreignkey')
    op.create_foreign_key('product_nutrition_productId_fkey', 'product_nutrition', 'products', ['productId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'product_nutrition', type_='unique')
    op.create_index('product_nutrition_productId_key', 'product_nutrition', ['productId'], unique=True)
    op.alter_column('product_nutrition', 'updatedAt',
               existing_type=sa.DateTime(timezone=True),
               server_default=None,
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('product_nutrition', 'createdAt',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_nutrition', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('product_nutrition', 'updated_by')
    op.drop_column('product_nutrition', 'created_by')
    op.drop_column('product_nutrition', 'lab_report_url')
    op.drop_column('product_nutrition', 'data_source')
    op.drop_column('product_nutrition', 'verified_at')
    op.drop_column('product_nutrition', 'verified_by')
    op.drop_column('product_nutrition', 'is_verified')
    op.drop_column('product_nutrition', 'nutrition_claims')
    op.drop_column('product_nutrition', 'vitamin_c_mg')
    op.drop_column('product_nutrition', 'iron_mg')
    op.drop_column('product_nutrition', 'calcium_mg')
    op.drop_column('product_nutrition', 'sodium_mg')
    op.drop_column('product_nutrition', 'sugar_g')
    op.drop_column('product_nutrition', 'fiber_g')
    op.drop_column('product_nutrition', 'carbs_g')
    op.drop_column('product_nutrition', 'fat_g')
    op.drop_column('product_nutrition', 'protein_g')
    op.drop_column('product_nutrition', 'calories_per_100g')
    op.drop_column('product_nutrition', 'product_id')
    op.drop_constraint(None, 'product_categories', type_='foreignkey')
    op.create_foreign_key('product_categories_parentId_fkey', 'product_categories', 'product_categories', ['parentId'], ['id'], onupdate='CASCADE', ondelete='SET NULL')
    op.drop_index(op.f('ix_product_categories_code'), table_name='product_categories')
    op.create_index('product_categories_parentId_idx', 'product_categories', ['parentId'], unique=False)
    op.create_index('product_categories_level_idx', 'product_categories', ['level'], unique=False)
    op.create_index('product_categories_isActive_idx', 'product_categories', ['isActive'], unique=False)
    op.create_index('product_categories_code_key', 'product_categories', ['code'], unique=True)
    op.alter_column('product_categories', 'updatedAt',
               existing_type=sa.DateTime(timezone=True),
               server_default=None,
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False)
    op.alter_column('product_categories', 'createdAt',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_categories', 'isActive',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('product_categories', 'metadata',
               existing_type=sa.JSON(),
               server_default=sa.text("'{}'::jsonb"),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('product_categories', 'sortOrder',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('product_categories', 'level',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1'),
               existing_nullable=False)
    op.alter_column('product_categories', 'parentId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('product_categories', 'nameEn',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('product_categories', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('product_categories', 'code',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('product_categories', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('product_allergens', sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.add_column('product_allergens', sa.Column('allergenType', postgresql.ENUM('gluten', 'crustacean', 'egg', 'fish', 'peanut', 'soy', 'milk', 'nuts', 'celery', 'mustard', 'sesame', 'sulfur', 'lupin', 'mollusks', name='AllergenType'), autoincrement=False, nullable=False))
    op.add_column('product_allergens', sa.Column('severity', postgresql.ENUM('low', 'medium', 'high', 'severe', name='AllergenSeverity'), server_default=sa.text('\'medium\'::"AllergenSeverity"'), autoincrement=False, nullable=False))
    op.add_column('product_allergens', sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_table_comment(
        'product_allergens',
        existing_comment='Product allergen tracking with risk levels',
        schema=None
    )
    op.drop_constraint(None, 'product_allergens', type_='foreignkey')
    op.create_foreign_key('product_allergens_productId_fkey', 'product_allergens', 'products', ['productId'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.drop_constraint(None, 'product_allergens', type_='unique')
    op.create_index('product_allergens_productId_idx', 'product_allergens', ['productId'], unique=False)
    op.create_index('product_allergens_productId_allergenType_key', 'product_allergens', ['productId', 'allergenType'], unique=True)
    op.alter_column('product_allergens', 'createdAt',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('product_allergens', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('product_allergens', 'updatedAt')
    op.drop_column('product_allergens', 'created_by')
    op.drop_column('product_allergens', 'is_active')
    op.drop_column('product_allergens', 'cross_contamination_risk')
    op.drop_column('product_allergens', 'source')
    op.drop_column('product_allergens', 'risk_level')
    op.drop_column('product_allergens', 'allergen_type')
    op.drop_column('product_allergens', 'sku_id')
    op.create_table('erp_sync_logs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('organizationId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('success', 'error', 'partial', name='ERPSyncStatus'), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('recordsProcessed', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('errors', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organizationId'], ['organizations.id'], name='erp_sync_logs_organizationId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='erp_sync_logs_pkey')
    )
    op.create_index('erp_sync_logs_type_idx', 'erp_sync_logs', ['type'], unique=False)
    op.create_index('erp_sync_logs_status_idx', 'erp_sync_logs', ['status'], unique=False)
    op.create_index('erp_sync_logs_organizationId_idx', 'erp_sync_logs', ['organizationId'], unique=False)
    op.create_index('erp_sync_logs_createdAt_idx', 'erp_sync_logs', ['createdAt'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refreshToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('deviceInfo', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('location', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('isTrusted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('lastActivity', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='sessions_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey')
    )
    op.create_index('sessions_userId_idx', 'sessions', ['userId'], unique=False)
    op.create_index('sessions_token_key', 'sessions', ['token'], unique=True)
    op.create_index('sessions_token_idx', 'sessions', ['token'], unique=False)
    op.create_index('sessions_refreshToken_key', 'sessions', ['refreshToken'], unique=True)
    op.create_index('sessions_expiresAt_idx', 'sessions', ['expiresAt'], unique=False)
    op.create_table('supplier_products',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierProductCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierName', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('leadTime', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('minOrderQty', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('maxOrderQty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pricing', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('isPreferred', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('qualityGrade', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qualityNotes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name='supplier_products_productId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplierId'], ['organizations.id'], name='supplier_products_supplierId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supplier_products_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('supplier_products_supplierId_productId_key', 'supplier_products', ['supplierId', 'productId'], unique=True)
    op.create_index('supplier_products_supplierId_idx', 'supplier_products', ['supplierId'], unique=False)
    op.create_index('supplier_products_productId_idx', 'supplier_products', ['productId'], unique=False)
    op.create_index('supplier_products_isActive_idx', 'supplier_products', ['isActive'], unique=False)
    op.create_table('inventory_logs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('skuId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('purchase', 'sale', 'adjustment', 'waste', 'return', 'transfer', name='InventoryTransactionType'), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('referenceId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('beforeQty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('afterQty', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('operatorId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['skuId'], ['product_skus.id'], name='inventory_logs_skuId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='inventory_logs_pkey')
    )
    op.create_index('inventory_logs_type_idx', 'inventory_logs', ['type'], unique=False)
    op.create_index('inventory_logs_skuId_idx', 'inventory_logs', ['skuId'], unique=False)
    op.create_index('inventory_logs_createdAt_idx', 'inventory_logs', ['createdAt'], unique=False)
    op.create_table('organizations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('restaurant', 'supplier', name='OrganizationType'), autoincrement=False, nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('notifications',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('order_confirmed', 'order_shipped', 'order_delivered', 'reconciliation_ready', 'discrepancy_found', 'payment_due', 'erp_sync_error', 'system_maintenance', name='NotificationType'), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('readAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('priority', postgresql.ENUM('low', 'medium', 'high', 'urgent', name='NotificationPriority'), server_default=sa.text('\'medium\'::"NotificationPriority"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='notifications_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='notifications_pkey')
    )
    op.create_index('notifications_userId_idx', 'notifications', ['userId'], unique=False)
    op.create_index('notifications_read_idx', 'notifications', ['read'], unique=False)
    op.create_index('notifications_createdAt_idx', 'notifications', ['createdAt'], unique=False)
    op.create_table('mfa_verifications',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('method', postgresql.ENUM('none', 'totp', 'sms', 'email', name='MFAMethod'), autoincrement=False, nullable=False),
    sa.Column('code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('maxAttempts', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('verifiedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='mfa_verifications_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='mfa_verifications_pkey')
    )
    op.create_index('mfa_verifications_userId_idx', 'mfa_verifications', ['userId'], unique=False)
    op.create_index('mfa_verifications_expiresAt_idx', 'mfa_verifications', ['expiresAt'], unique=False)
    op.create_index('mfa_verifications_code_idx', 'mfa_verifications', ['code'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('passwordHash', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('organizationId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('restaurant_admin', 'restaurant_manager', 'restaurant_operator', 'supplier_admin', 'supplier_manager', 'platform_admin', name='UserRole'), autoincrement=False, nullable=False),
    sa.Column('isActive', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('lastLoginAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('tokenVersion', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('isSuperUser', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('superUserExpiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('superUserReason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('emailVerified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('emailVerifiedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('emailVerificationToken', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('phoneVerified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('phoneVerifiedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('businessVerified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('businessVerifiedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('businessDocuments', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('mfaEnabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('mfaSecret', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('mfaBackupCodes', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('mfaMethod', postgresql.ENUM('none', 'totp', 'sms', 'email', name='MFAMethod'), server_default=sa.text('\'none\'::"MFAMethod"'), autoincrement=False, nullable=False),
    sa.Column('failedLoginAttempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('lockedUntil', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('lastPasswordChange', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('passwordHistory', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('maxSessions', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organizationId'], ['organizations.id'], name='users_organizationId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('users_email_key', 'users', ['email'], unique=True)
    op.create_table('file_uploads',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('originalName', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('mimetype', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('path', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uploadedBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='file_uploads_pkey')
    )
    op.create_index('file_uploads_uploadedBy_idx', 'file_uploads', ['uploadedBy'], unique=False)
    op.create_index('file_uploads_createdAt_idx', 'file_uploads', ['createdAt'], unique=False)
    op.create_table('reconciliation_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reconciliationId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('orderId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('orderedQuantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.Column('deliveredQuantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.Column('acceptedQuantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.Column('unitPrice', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=False),
    sa.Column('lineTotal', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('discrepancyType', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('discrepancyAmount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=True),
    sa.Column('resolutionAction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['orderId'], ['orders.id'], name='reconciliation_items_orderId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['reconciliationId'], ['reconciliations.id'], name='reconciliation_items_reconciliationId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='reconciliation_items_pkey')
    )
    op.create_table('reconciliations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reconciliationNumber', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('periodStart', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('periodEnd', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('restaurantId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'processing', 'review_required', 'approved', 'disputed', 'resolved', name='ReconciliationStatus'), server_default=sa.text('\'pending\'::"ReconciliationStatus"'), autoincrement=False, nullable=False),
    sa.Column('summary', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('discrepancies', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('resolution', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidenceScore', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('autoApproved', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('createdBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('approvedBy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('approvedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['approvedBy'], ['users.id'], name='reconciliations_approvedBy_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['createdBy'], ['users.id'], name='reconciliations_createdBy_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['restaurantId'], ['organizations.id'], name='reconciliations_restaurantId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplierId'], ['organizations.id'], name='reconciliations_supplierId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='reconciliations_pkey')
    )
    op.create_index('reconciliations_status_idx', 'reconciliations', ['status'], unique=False)
    op.create_index('reconciliations_restaurantId_supplierId_idx', 'reconciliations', ['restaurantId', 'supplierId'], unique=False)
    op.create_index('reconciliations_reconciliationNumber_key', 'reconciliations', ['reconciliationNumber'], unique=True)
    op.create_index('reconciliations_periodStart_periodEnd_idx', 'reconciliations', ['periodStart', 'periodEnd'], unique=False)
    op.create_table('super_user_requests',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'approved', 'rejected', 'expired', 'revoked', name='SuperUserRequestStatus'), server_default=sa.text('\'pending\'::"SuperUserRequestStatus"'), autoincrement=False, nullable=False),
    sa.Column('requestedAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('approvedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('rejectedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('approvedBy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rejectedBy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='super_user_requests_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='super_user_requests_pkey')
    )
    op.create_index('super_user_requests_userId_idx', 'super_user_requests', ['userId'], unique=False)
    op.create_index('super_user_requests_status_idx', 'super_user_requests', ['status'], unique=False)
    op.create_index('super_user_requests_requestedAt_idx', 'super_user_requests', ['requestedAt'], unique=False)
    op.create_table('workflow_tasks',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('pending', 'running', 'completed', 'failed', 'cancelled', name='WorkflowStatus'), server_default=sa.text('\'pending\'::"WorkflowStatus"'), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('maxAttempts', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False),
    sa.Column('scheduledAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('startedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('completedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='workflow_tasks_pkey')
    )
    op.create_index('workflow_tasks_type_idx', 'workflow_tasks', ['type'], unique=False)
    op.create_index('workflow_tasks_status_idx', 'workflow_tasks', ['status'], unique=False)
    op.create_index('workflow_tasks_scheduledAt_idx', 'workflow_tasks', ['scheduledAt'], unique=False)
    op.create_index('workflow_tasks_createdAt_idx', 'workflow_tasks', ['createdAt'], unique=False)
    op.create_table('order_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('orderId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('productName', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.Column('unitPrice', sa.NUMERIC(precision=10, scale=4), autoincrement=False, nullable=False),
    sa.Column('lineTotal', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['orderId'], ['orders.id'], name='order_items_orderId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['productId'], ['products.id'], name='order_items_productId_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id', name='order_items_pkey')
    )
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expiresAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('used', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('usedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='password_reset_tokens_userId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='password_reset_tokens_pkey')
    )
    op.create_index('password_reset_tokens_userId_idx', 'password_reset_tokens', ['userId'], unique=False)
    op.create_index('password_reset_tokens_token_key', 'password_reset_tokens', ['token'], unique=True)
    op.create_index('password_reset_tokens_token_idx', 'password_reset_tokens', ['token'], unique=False)
    op.create_index('password_reset_tokens_expiresAt_idx', 'password_reset_tokens', ['expiresAt'], unique=False)
    op.create_table('supplier_product_skus',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierProductId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('skuId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierSkuCode', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('unitPrice', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('priceUnit', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('priceValidFrom', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('priceValidTo', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('isAvailable', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('stockStatus', postgresql.ENUM('in_stock', 'low_stock', 'out_of_stock', 'discontinued', name='StockStatus'), server_default=sa.text('\'in_stock\'::"StockStatus"'), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['skuId'], ['product_skus.id'], name='supplier_product_skus_skuId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplierProductId'], ['supplier_products.id'], name='supplier_product_skus_supplierProductId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supplier_product_skus_pkey')
    )
    op.create_index('supplier_product_skus_supplierProductId_skuId_key', 'supplier_product_skus', ['supplierProductId', 'skuId'], unique=True)
    op.create_index('supplier_product_skus_supplierProductId_idx', 'supplier_product_skus', ['supplierProductId'], unique=False)
    op.create_index('supplier_product_skus_skuId_idx', 'supplier_product_skus', ['skuId'], unique=False)
    op.create_table('system_configs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('category', sa.TEXT(), server_default=sa.text("'general'::text"), autoincrement=False, nullable=False),
    sa.Column('updatedBy', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='system_configs_pkey')
    )
    op.create_index('system_configs_key_key', 'system_configs', ['key'], unique=True)
    op.create_index('system_configs_category_idx', 'system_configs', ['category'], unique=False)
    op.create_table('orders',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('orderNumber', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('restaurantId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('supplierId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('draft', 'submitted', 'confirmed', 'preparing', 'shipped', 'delivered', 'accepted', 'completed', 'cancelled', name='OrderStatus'), server_default=sa.text('\'draft\'::"OrderStatus"'), autoincrement=False, nullable=False),
    sa.Column('subtotal', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('taxAmount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('totalAmount', sa.NUMERIC(precision=12, scale=2), autoincrement=False, nullable=False),
    sa.Column('deliveryDate', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('deliveryAddress', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('adjustments', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('createdBy', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['createdBy'], ['users.id'], name='orders_createdBy_fkey', onupdate='CASCADE', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['restaurantId'], ['organizations.id'], name='orders_restaurantId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplierId'], ['organizations.id'], name='orders_supplierId_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='orders_pkey')
    )
    op.create_index('orders_supplierId_idx', 'orders', ['supplierId'], unique=False)
    op.create_index('orders_status_idx', 'orders', ['status'], unique=False)
    op.create_index('orders_restaurantId_idx', 'orders', ['restaurantId'], unique=False)
    op.create_index('orders_orderNumber_key', 'orders', ['orderNumber'], unique=True)
    op.create_index('orders_deliveryDate_idx', 'orders', ['deliveryDate'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('entityType', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('entityId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('changes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.Column('ipAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('userAgent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='audit_logs_userId_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_index('audit_logs_userId_idx', 'audit_logs', ['userId'], unique=False)
    op.create_index('audit_logs_entityType_entityId_idx', 'audit_logs', ['entityType', 'entityId'], unique=False)
    op.create_index('audit_logs_createdAt_idx', 'audit_logs', ['createdAt'], unique=False)
    op.drop_table('supplier_skus')
    # ### end Alembic commands ###