# Cloud Run optimized Dockerfile for user-service
FROM node:20-alpine AS base

# Install security updates and required packages
RUN apk update && apk upgrade && apk add --no-cache dumb-init curl

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Copy workspace dependencies first
COPY shared/types/package*.json ./shared/types/
COPY backend/user-service/package*.json ./backend/user-service/

# Install shared types dependencies
WORKDIR /app/shared/types
RUN npm ci

# Install User Service dependencies
WORKDIR /app/backend/user-service
RUN npm ci --omit=dev

# Build stage
FROM base AS builder
WORKDIR /app

# Copy node_modules from deps stage
COPY --from=deps /app/shared/types ./shared/types
COPY --from=deps /app/backend/user-service/node_modules ./backend/user-service/node_modules

# Copy source code
COPY shared/types ./shared/types
COPY backend/user-service ./backend/user-service

# Build from User Service directory
WORKDIR /app/backend/user-service
ENV NODE_ENV=production
RUN npm run build

# Production image
FROM base AS runner
WORKDIR /app

# Create non-root user for Cloud Run
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 user-service

# Create logs directory
RUN mkdir -p /app/logs && chown -R user-service:nodejs /app/logs

# Copy built application
COPY --from=builder --chown=user-service:nodejs /app/backend/user-service/dist ./dist
COPY --from=builder --chown=user-service:nodejs /app/backend/user-service/node_modules ./node_modules
COPY --from=builder --chown=user-service:nodejs /app/backend/user-service/package.json ./package.json

# Switch to non-root user
USER user-service

# Cloud Run expects the container to listen on PORT environment variable
ENV PORT=${PORT:-8001}
ENV NODE_ENV=production

# Expose the port (Cloud Run will override this)
EXPOSE ${PORT}

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]
