generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  phone     String?
  avatar    String?
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userOrganizations UserOrganization[]
  passwordResets    PasswordReset[]

  @@map("users")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  type      String   // 'restaurant' | 'supplier'
  taxId     String?
  address   String?
  phone     String?
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userOrganizations UserOrganization[]

  @@map("organizations")
}

model UserOrganization {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  role           String   // UserRole enum values
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model Invitation {
  id             String   @id @default(uuid())
  email          String
  organizationId String
  role           String
  invitedBy      String
  token          String   @unique
  status         String   @default("pending") // 'pending' | 'accepted' | 'expired'
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  acceptedAt     DateTime?

  @@map("invitations")
}