name: Deploy Staging (Permanent)

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          
      - name: Configure gcloud
        run: |
          gcloud auth configure-docker asia-east1-docker.pkg.dev --quiet
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          # Verify authentication
          gcloud auth list --format="value(account)" --filter="status:ACTIVE"
          echo "‚úÖ Authentication verified"
          
      - name: Deploy Services with Permanent Configuration
        run: |
          chmod +x scripts/deploy-staging-permanent.sh
          echo "üöÄ Starting deployment with permanent configuration..."
          echo "Environment: staging"
          echo "Project: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Region: asia-east1"
          ./scripts/deploy-staging-permanent.sh
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          DATABASE_HOST: "/cloudsql/orderly-472413:asia-east1:orderly-db-v2"
          DATABASE_PORT: "5432"
          DATABASE_NAME: "orderly"
          DATABASE_USER: "orderly"
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          
      - name: Run Database Migrations
        run: |
          echo "üóÑÔ∏è Running database migrations via Cloud Build..."
          
          # Check if migration Cloud Build config exists
          if [ ! -f "scripts/cloudbuild/migration-job.yaml" ]; then
            echo "‚ö†Ô∏è Migration Cloud Build config not found, skipping database migrations"
            echo "Note: Database migrations should be run separately using Cloud Build or Cloud Run Jobs"
            exit 0
          fi
          
          # Submit migration job to Cloud Build
          echo "Submitting migration job to Cloud Build..."
          gcloud builds submit \
            --config=scripts/cloudbuild/migration-job.yaml \
            --substitutions=_INSTANCE_CONNECTION_NAME="orderly-472413:asia-east1:orderly-db-v2",_REGION="asia-east1" \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            || echo "‚ö†Ô∏è Cloud Build submission failed - migrations may need to be run manually"
          
      - name: Import/Verify Data
        run: |
          echo "‚ö†Ô∏è Data import is not supported in CI/CD environment"
          echo "Note: Data import should be run manually from a machine with Cloud SQL Proxy"
          echo "Or use Cloud Run Jobs for data seeding"
          
      - name: Health Check
        run: |
          echo "Running post-deployment health checks..."
          if [ -f "scripts/health-check-simple.sh" ]; then
            chmod +x scripts/health-check-simple.sh
            ./scripts/health-check-simple.sh
          else
            echo "‚ö†Ô∏è Health check script not found, running basic API test..."
            curl -f "https://orderly-api-gateway-fastapi-staging-655602747430.asia-east1.run.app/ready"
          fi
          
      - name: Verify Core APIs
        run: |
          echo "Testing core API endpoints..."
          GATEWAY_URL="https://orderly-api-gateway-fastapi-staging-655602747430.asia-east1.run.app"
          
          # Test product categories API
          echo "Testing product categories:"
          CATEGORIES_COUNT=$(curl -s "$GATEWAY_URL/api/products/categories" | jq '.meta.total // 0')
          echo "Product categories count: $CATEGORIES_COUNT"
          
          # Test products API with higher limit
          echo "Testing products API:"
          PRODUCTS_COUNT=$(curl -s "$GATEWAY_URL/api/products/products?limit=60" | jq '.data.pagination.totalItems // 0')
          echo "Products count: $PRODUCTS_COUNT"
          
          # Verify minimum data requirements
          if [ "$CATEGORIES_COUNT" -lt 100 ]; then
            echo "‚ùå Warning: Product categories count ($CATEGORIES_COUNT) below expected (105)"
          fi
          
          if [ "$PRODUCTS_COUNT" -lt 50 ]; then
            echo "‚ùå Warning: Products count ($PRODUCTS_COUNT) below expected (52)"
          fi
          
          echo "‚úÖ Core API verification completed"
          
      - name: Check for Deployment Failures
        if: failure()
        run: |
          echo "‚ùå Deployment failed - collecting diagnostic information..."
          echo ""
          echo "üîç Authentication Status:"
          gcloud auth list
          echo ""
          echo "üîç Project Access:"
          gcloud projects describe ${{ secrets.GCP_PROJECT_ID }} || echo "Cannot access project"
          echo ""
          echo "üîç Recent Cloud Run deployments:"
          gcloud run services list --region=asia-east1 --limit=10 || echo "Cannot list services"
          echo ""
          echo "üîç Cloud Run logs (last 10 entries):"
          gcloud logging read 'resource.type="cloud_run_revision"' --limit=10 --format="value(textPayload)" || echo "Cannot read logs"

      - name: Send Deployment Report
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed or had issues"
          fi
          echo ""
          echo "üìä Deployment Summary"
          echo "======================"
          echo "Status: ${{ job.status }}"
          echo "Timestamp: $(date)"
          echo "Branch: staging"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo ""
          echo "Services deployed using permanent configuration from configs/staging/"
          echo ""
          echo "üîó Staging URLs:"
          echo "- API Gateway: https://orderly-api-gateway-fastapi-staging-655602747430.asia-east1.run.app"
          echo "- Frontend: https://orderly-frontend-staging-655602747430.asia-east1.run.app"
          echo ""
          echo "üìã Next steps:"
          echo "1. Manual verification of frontend functionality"
          echo "2. Check Cloud Run logs if any issues"
          echo "3. Monitor performance metrics"
          echo "4. Review deployment logs in GitHub Actions"