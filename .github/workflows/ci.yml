name: CI - Build and Test

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

env:
  NODE_VERSION: '20'
  REGISTRY: gcr.io

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      user-service: ${{ steps.changes.outputs.user-service }}
      order-service: ${{ steps.changes.outputs.order-service }}
      product-service: ${{ steps.changes.outputs.product-service }}
      acceptance-service: ${{ steps.changes.outputs.acceptance-service }}
      billing-service: ${{ steps.changes.outputs.billing-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      admin-service: ${{ steps.changes.outputs.admin-service }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'shared/**'
              - 'package.json'
              - 'package-lock.json'
            frontend:
              - 'frontend/**'
              - 'app/**'
              - 'components/**'
              - 'lib/**'
              - 'hooks/**'
              - 'middleware.ts'
              - 'next.config.js'
              - 'tailwind.config.ts'
              - 'tsconfig.json'
            infrastructure:
              - 'infrastructure/**'
              - 'scripts/**'
              - 'docker-compose*.yml'
              - '.env.example'
            api-gateway:
              - 'backend/api-gateway/**'
            user-service:
              - 'backend/user-service/**'
            order-service:
              - 'backend/order-service/**'
            product-service:
              - 'backend/product-service/**'
            acceptance-service:
              - 'backend/acceptance-service/**'
            billing-service:
              - 'backend/billing-service/**'
            notification-service:
              - 'backend/notification-service/**'
            admin-service:
              - 'backend/admin-service/**'

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check Prettier formatting
        run: npm run format:check

  typecheck:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma clients
        run: |
          npx prisma generate --schema=backend/user-service/prisma/schema.prisma
          npx prisma generate --schema=backend/order-service/prisma/schema.prisma
          npx prisma generate --schema=backend/product-service/prisma/schema.prisma
          npx prisma generate --schema=backend/acceptance-service/prisma/schema.prisma
          npx prisma generate --schema=backend/billing-service/prisma/schema.prisma
          npx prisma generate --schema=backend/notification-service/prisma/schema.prisma
      
      - name: TypeScript compile check
        run: npm run build

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: orderly
          POSTGRES_PASSWORD: orderly_test
          POSTGRES_DB: orderly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        service: [api-gateway, user-service, order-service, product-service, acceptance-service, billing-service, notification-service, admin-service]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check if service exists
        id: check-service
        run: |
          if [ -d "backend/${{ matrix.service }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate Prisma client for service
        if: steps.check-service.outputs.exists == 'true'
        run: |
          if [ -f "backend/${{ matrix.service }}/prisma/schema.prisma" ]; then
            npx prisma generate --schema=backend/${{ matrix.service }}/prisma/schema.prisma
          fi
      
      - name: Run database migrations
        if: steps.check-service.outputs.exists == 'true'
        env:
          DATABASE_URL: postgresql://orderly:orderly_test@localhost:5432/orderly_test
        run: |
          if [ -f "backend/${{ matrix.service }}/prisma/schema.prisma" ]; then
            npx prisma migrate deploy --schema=backend/${{ matrix.service }}/prisma/schema.prisma
          fi
      
      - name: Run tests for ${{ matrix.service }}
        if: steps.check-service.outputs.exists == 'true'
        working-directory: backend/${{ matrix.service }}
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://orderly:orderly_test@localhost:5432/orderly_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_for_testing_only
          JWT_REFRESH_SECRET: test_refresh_secret_for_testing_only
        run: |
          if [ -f "package.json" ] && npm run | grep -q "test"; then
            npm test
          else
            echo "No tests found for ${{ matrix.service }}, skipping..."
          fi

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run frontend tests
        run: |
          if npm run | grep -q "test:frontend"; then
            npm run test:frontend
          else
            echo "No frontend tests configured, skipping..."
          fi

  build-backend:
    name: Build Backend Services
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-format, typecheck, test-backend]
    if: needs.detect-changes.outputs.backend == 'true'
    
    strategy:
      matrix:
        service: [api-gateway, user-service, order-service, product-service, acceptance-service, billing-service, notification-service, admin-service]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check if service exists
        id: check-service
        run: |
          if [ -d "backend/${{ matrix.service }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate Prisma client
        if: steps.check-service.outputs.exists == 'true'
        run: |
          if [ -f "backend/${{ matrix.service }}/prisma/schema.prisma" ]; then
            npx prisma generate --schema=backend/${{ matrix.service }}/prisma/schema.prisma
          fi
      
      - name: Build ${{ matrix.service }}
        if: steps.check-service.outputs.exists == 'true'
        run: npm run build -w backend/${{ matrix.service }}

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [detect-changes, lint-and-format, typecheck, test-frontend]
    if: needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build frontend
        run: |
          if [ -d "frontend" ]; then
            npm run build -w frontend
          elif [ -f "next.config.js" ]; then
            npm run build
          else
            echo "No frontend build configuration found"
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level moderate
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: orderly
          POSTGRES_PASSWORD: orderly_test
          POSTGRES_DB: orderly_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test environment
        env:
          DATABASE_URL: postgresql://orderly:orderly_test@localhost:5432/orderly_test
        run: |
          # Generate Prisma clients for all services
          for service in backend/*/; do
            if [ -f "${service}prisma/schema.prisma" ]; then
              npx prisma generate --schema="${service}prisma/schema.prisma"
              npx prisma migrate deploy --schema="${service}prisma/schema.prisma"
            fi
          done
      
      - name: Start services for integration testing
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://orderly:orderly_test@localhost:5432/orderly_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret_for_integration_testing
        run: |
          # Start all backend services in background
          for service in api-gateway user-service order-service product-service acceptance-service billing-service notification-service; do
            if [ -d "backend/$service" ]; then
              echo "Starting $service..."
              cd "backend/$service"
              npm run start &
              cd ../..
              sleep 2
            fi
          done
          
          # Wait for services to be ready
          sleep 10
      
      - name: Run integration tests
        run: |
          if npm run | grep -q "test:integration"; then
            npm run test:integration
          else
            echo "Running basic health check integration tests..."
            # Basic health checks
            for port in 8000 8001 8002 8003 8004 8005 8006; do
              if curl -f "http://localhost:$port/health" 2>/dev/null; then
                echo "✓ Service on port $port is healthy"
              else
                echo "✗ Service on port $port failed health check"
              fi
            done
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, typecheck, test-backend, test-frontend, build-backend, build-frontend, security-scan, integration-test]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-and-format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript Check | ${{ needs.typecheck.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Build | ${{ needs.build-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Build | ${{ needs.build-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Ready for deployment: ${{ needs.integration-test.result == 'success' && 'true' || 'false' }}" >> $GITHUB_STEP_SUMMARY