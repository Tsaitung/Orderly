name: 🚀 Orderly Hello World Deployment

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID || 'orderly-472413' }}
  GCP_REGION: asia-east1

jobs:
  # =============================================================================
  # BUILD AND TEST
  # =============================================================================
  build:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    outputs:
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      api-gateway-image: ${{ steps.build-api-gateway.outputs.image }}
      user-service-image: ${{ steps.build-user-service.outputs.image }}
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests (if available)
        run: npm run test --if-present

      - name: 🔍 Run linting (if available)
        run: npm run lint --if-present

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🐳 Configure Docker
        run: |
          gcloud auth configure-docker
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: 🏗️ Build Frontend Image (root Next.js)
        id: build-frontend
        run: |
          IMAGE="us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/orderly-docker/orderly-frontend:${{ github.sha }}"
          docker build -f Dockerfile.frontend -t $IMAGE .
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: 🏗️ Build API Gateway Image
        id: build-api-gateway
        run: |
          IMAGE="us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/orderly-docker/orderly-api-gateway:${{ github.sha }}"
          docker build -t $IMAGE ./backend/api-gateway
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: 🏗️ Build User Service Image
        id: build-user-service
        run: |
          IMAGE="us-central1-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/orderly-docker/orderly-user-service:${{ github.sha }}"
          docker build -t $IMAGE ./backend/user-service
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

  # =============================================================================
  # DEPLOY TO STAGING
  # =============================================================================
  deploy-staging:
    name: 🚧 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    outputs:
      frontend-url: ${{ steps.deploy.outputs.frontend-url }}
      api-gateway-url: ${{ steps.deploy.outputs.api-gateway-url }}
      user-service-url: ${{ steps.deploy.outputs.user-service-url }}
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy Services
        id: deploy
        run: |
          # Deploy User Service
          gcloud run deploy orderly-user-service-staging \
            --image ${{ needs.build.outputs.user-service-image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --min-instances 0 \
            --port 8001 \
            --set-env-vars NODE_ENV=staging,JWT_SECRET=${{ secrets.JWT_SECRET || 'staging-jwt-secret' }}

          USER_SERVICE_URL=$(gcloud run services describe orderly-user-service-staging --region=${{ env.GCP_REGION }} --format='value(status.url)')

          # Deploy API Gateway
          gcloud run deploy orderly-api-gateway-staging \
            --image ${{ needs.build.outputs.api-gateway-image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --min-instances 0 \
            --port 3000 \
            --set-env-vars NODE_ENV=staging,JWT_SECRET=${{ secrets.JWT_SECRET || 'staging-jwt-secret' }},USER_SERVICE_URL=$USER_SERVICE_URL

          API_GATEWAY_URL=$(gcloud run services describe orderly-api-gateway-staging --region=${{ env.GCP_REGION }} --format='value(status.url)')

          # Deploy Frontend
          gcloud run deploy orderly-frontend-staging \
            --image ${{ needs.build.outputs.frontend-image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --min-instances 0 \
            --port 8000 \
            --set-env-vars NODE_ENV=staging,NEXT_PUBLIC_API_BASE_URL=$API_GATEWAY_URL/api

          FRONTEND_URL=$(gcloud run services describe orderly-frontend-staging --region=${{ env.GCP_REGION }} --format='value(status.url)')

          echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "api-gateway-url=$API_GATEWAY_URL" >> $GITHUB_OUTPUT
          echo "user-service-url=$USER_SERVICE_URL" >> $GITHUB_OUTPUT

      - name: 🧪 Health Check
        run: |
          echo "Waiting for services to be ready..."
          sleep 30
          
          echo "🌐 Staging URLs:"
          echo "Frontend: ${{ steps.deploy.outputs.frontend-url }}"
          echo "API Gateway: ${{ steps.deploy.outputs.api-gateway-url }}"
          echo "User Service: ${{ steps.deploy.outputs.user-service-url }}"
          
          # Health checks
          curl -f "${{ steps.deploy.outputs.frontend-url }}/api/health" || exit 1
          curl -f "${{ steps.deploy.outputs.api-gateway-url }}/health" || exit 1
          curl -f "${{ steps.deploy.outputs.user-service-url }}/health" || exit 1
          
          echo "✅ All staging services are healthy!"

  # =============================================================================
  # DEPLOY TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    outputs:
      frontend-url: ${{ steps.deploy.outputs.frontend-url }}
      api-gateway-url: ${{ steps.deploy.outputs.api-gateway-url }}
      user-service-url: ${{ steps.deploy.outputs.user-service-url }}
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: 🛠️ Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: 🚀 Deploy Services
        id: deploy
        run: |
          # Deploy User Service
          gcloud run deploy orderly-user-service-prod \
            --image ${{ needs.build.outputs.user-service-image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 2 \
            --max-instances 100 \
            --min-instances 1 \
            --port 8001 \
            --set-env-vars NODE_ENV=production,JWT_SECRET=${{ secrets.JWT_SECRET_PROD }}

          USER_SERVICE_URL=$(gcloud run services describe orderly-user-service-prod --region=${{ env.GCP_REGION }} --format='value(status.url)')

          # Deploy API Gateway
          gcloud run deploy orderly-api-gateway-prod \
            --image ${{ needs.build.outputs.api-gateway-image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 2 \
            --max-instances 100 \
            --min-instances 1 \
            --port 3000 \
            --set-env-vars NODE_ENV=production,JWT_SECRET=${{ secrets.JWT_SECRET_PROD }},USER_SERVICE_URL=$USER_SERVICE_URL

          API_GATEWAY_URL=$(gcloud run services describe orderly-api-gateway-prod --region=${{ env.GCP_REGION }} --format='value(status.url)')

          # Deploy Frontend
          gcloud run deploy orderly-frontend-prod \
            --image ${{ needs.build.outputs.frontend-image }} \
            --region ${{ env.GCP_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 2 \
            --max-instances 100 \
            --min-instances 1 \
            --port 8000 \
            --set-env-vars NODE_ENV=production,NEXT_PUBLIC_API_BASE_URL=$API_GATEWAY_URL/api

          FRONTEND_URL=$(gcloud run services describe orderly-frontend-prod --region=${{ env.GCP_REGION }} --format='value(status.url)')

          echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "api-gateway-url=$API_GATEWAY_URL" >> $GITHUB_OUTPUT
          echo "user-service-url=$USER_SERVICE_URL" >> $GITHUB_OUTPUT

      - name: 🧪 Health Check
        run: |
          echo "Waiting for services to be ready..."
          sleep 60
          
          echo "🌐 Production URLs:"
          echo "Frontend: ${{ steps.deploy.outputs.frontend-url }}"
          echo "API Gateway: ${{ steps.deploy.outputs.api-gateway-url }}"
          echo "User Service: ${{ steps.deploy.outputs.user-service-url }}"
          
          # Health checks
          curl -f "${{ steps.deploy.outputs.frontend-url }}/api/health" || exit 1
          curl -f "${{ steps.deploy.outputs.api-gateway-url }}/health" || exit 1
          curl -f "${{ steps.deploy.outputs.user-service-url }}/health" || exit 1
          
          echo "🎉 Production deployment completed successfully!"
          echo "🌟 Access your Hello World app at: ${{ steps.deploy.outputs.frontend-url }}"
