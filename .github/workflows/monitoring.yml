name: Monitoring and Alerting

on:
  schedule:
    # Run health checks every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of monitoring check'
        required: true
        default: 'health'
        type: choice
        options:
          - health
          - performance
          - security
          - cost
          - all

env:
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  GOOGLE_CLOUD_REGION: asia-east1

jobs:
  health-monitoring:
    name: Service Health Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'health' || github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      
      - name: Check service health
        id: health-check
        run: |
          # Services to monitor
          services=("api-gateway" "user-service" "order-service" "product-service" "acceptance-service" "billing-service" "notification-service" "admin-service")
          environments=("staging" "production")
          
          failed_services=()
          healthy_services=()
          
          for env in "${environments[@]}"; do
            echo "Checking $env environment..."
            
            for service in "${services[@]}"; do
              service_name="orderly-$service-$env"
              
              # Get service URL
              url=$(gcloud run services describe "$service_name" \
                --region="$GOOGLE_CLOUD_REGION" \
                --format="value(status.url)" \
                --project="$GOOGLE_CLOUD_PROJECT" 2>/dev/null || echo "")
              
              if [ -n "$url" ]; then
                # Check health endpoint
                if curl -sf "$url/health" --max-time 10 > /dev/null 2>&1; then
                  healthy_services+=("$env/$service")
                  echo "✅ $env/$service is healthy"
                else
                  failed_services+=("$env/$service")
                  echo "❌ $env/$service failed health check"
                  
                  # Get recent logs for failed service
                  echo "Recent logs for $service_name:"
                  gcloud logging read "resource.type=cloud_run_revision AND resource.labels.service_name=$service_name" \
                    --limit=5 \
                    --format="table(timestamp,severity,textPayload)" \
                    --project="$GOOGLE_CLOUD_PROJECT" || true
                fi
              else
                echo "⚠️ $env/$service not found or not deployed"
              fi
            done
          done
          
          # Set outputs
          echo "failed_count=${#failed_services[@]}" >> $GITHUB_OUTPUT
          echo "healthy_count=${#healthy_services[@]}" >> $GITHUB_OUTPUT
          
          if [ ${#failed_services[@]} -gt 0 ]; then
            echo "failed_services=${failed_services[*]}" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Send health alert
        if: failure()
        run: |
          # Send to Slack (if configured)
          if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"🚨 Orderly Health Check Failed\nFailed services: ${{ steps.health-check.outputs.failed_services }}\nTime: $(date)"}' \
              "${{ secrets.SLACK_WEBHOOK_URL }}"
          fi
          
          # Send to PagerDuty (if configured)
          if [ -n "${{ secrets.PAGERDUTY_INTEGRATION_KEY }}" ]; then
            curl -X POST \
              -H "Content-Type: application/json" \
              -d '{
                "routing_key": "${{ secrets.PAGERDUTY_INTEGRATION_KEY }}",
                "event_action": "trigger",
                "payload": {
                  "summary": "Orderly service health check failed",
                  "source": "GitHub Actions",
                  "severity": "critical",
                  "custom_details": {
                    "failed_services": "${{ steps.health-check.outputs.failed_services }}",
                    "healthy_services": "${{ steps.health-check.outputs.healthy_count }}"
                  }
                }
              }' \
              "https://events.pagerduty.com/v2/enqueue"
          fi

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'performance' || github.event.inputs.check_type == 'all'
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      
      - name: Check service performance
        run: |
          echo "## 📊 Performance Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get Cloud Run metrics
          services=("api-gateway" "user-service" "order-service" "product-service")
          
          for service in "${services[@]}"; do
            echo "### $service Performance" >> $GITHUB_STEP_SUMMARY
            
            # Get request count (last hour)
            request_count=$(gcloud monitoring metrics list \
              --filter="metric.type=run.googleapis.com/request_count" \
              --project="$GOOGLE_CLOUD_PROJECT" \
              --format="value(points[0].value.int64Value)" 2>/dev/null || echo "0")
            
            # Get request latency
            latency=$(gcloud monitoring metrics list \
              --filter="metric.type=run.googleapis.com/request_latencies" \
              --project="$GOOGLE_CLOUD_PROJECT" \
              --format="value(points[0].value.doubleValue)" 2>/dev/null || echo "0")
            
            echo "- **Requests (last hour):** $request_count" >> $GITHUB_STEP_SUMMARY
            echo "- **Average latency:** ${latency}ms" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          
          # Check database performance
          echo "### Database Performance" >> $GITHUB_STEP_SUMMARY
          db_cpu=$(gcloud sql instances describe orderly-db \
            --format="value(settings.tier)" --project="$GOOGLE_CLOUD_PROJECT" 2>/dev/null || echo "unknown")
          echo "- **Instance tier:** $db_cpu" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Active" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check Redis performance
          echo "### Redis Performance" >> $GITHUB_STEP_SUMMARY
          redis_memory=$(gcloud redis instances describe orderly-cache \
            --region="$GOOGLE_CLOUD_REGION" \
            --format="value(memorySizeGb)" \
            --project="$GOOGLE_CLOUD_PROJECT" 2>/dev/null || echo "unknown")
          echo "- **Memory size:** ${redis_memory}GB" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** Available" >> $GITHUB_STEP_SUMMARY

  cost-monitoring:
    name: Cost Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'cost' || github.event.inputs.check_type == 'all'
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      
      - name: Check costs and budgets
        run: |
          echo "## 💰 Cost Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get billing information (requires billing API enabled)
          echo "### Resource Usage:" >> $GITHUB_STEP_SUMMARY
          
          # Count Cloud Run services
          run_services=$(gcloud run services list --format="value(name)" --project="$GOOGLE_CLOUD_PROJECT" | wc -l)
          echo "- **Cloud Run services:** $run_services" >> $GITHUB_STEP_SUMMARY
          
          # Check Cloud SQL instances
          sql_instances=$(gcloud sql instances list --format="value(name)" --project="$GOOGLE_CLOUD_PROJECT" | wc -l)
          echo "- **Cloud SQL instances:** $sql_instances" >> $GITHUB_STEP_SUMMARY
          
          # Check Redis instances
          redis_instances=$(gcloud redis instances list --format="value(name)" --project="$GOOGLE_CLOUD_PROJECT" | wc -l)
          echo "- **Redis instances:** $redis_instances" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cost Optimization:" >> $GITHUB_STEP_SUMMARY
          echo "- **Min instances:** 0 (cost-optimized)" >> $GITHUB_STEP_SUMMARY
          echo "- **Auto-scaling:** Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource limits:** Configured" >> $GITHUB_STEP_SUMMARY
          
          # Alert if too many resources
          total_resources=$((run_services + sql_instances + redis_instances))
          if [ $total_resources -gt 20 ]; then
            echo "⚠️ **Warning:** High resource count detected ($total_resources resources)" >> $GITHUB_STEP_SUMMARY
            echo "Consider resource optimization to reduce costs." >> $GITHUB_STEP_SUMMARY
          fi

  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'security' || github.event.inputs.check_type == 'all'
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      
      - name: Security audit
        run: |
          echo "## 🔒 Security Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for security findings
          echo "### Security Status:" >> $GITHUB_STEP_SUMMARY
          
          # Check IAM permissions (basic check)
          iam_members=$(gcloud projects get-iam-policy "$GOOGLE_CLOUD_PROJECT" \
            --format="value(bindings[].members[])" | wc -l)
          echo "- **IAM members:** $iam_members" >> $GITHUB_STEP_SUMMARY
          
          # Check for public Cloud Run services
          public_services=$(gcloud run services list \
            --format="value(status.conditions[0].status)" \
            --project="$GOOGLE_CLOUD_PROJECT" | grep -c "True" || echo "0")
          echo "- **Public services:** $public_services" >> $GITHUB_STEP_SUMMARY
          
          # Check secret manager
          secret_count=$(gcloud secrets list --format="value(name)" --project="$GOOGLE_CLOUD_PROJECT" | wc -l)
          echo "- **Managed secrets:** $secret_count" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Compliance:" >> $GITHUB_STEP_SUMMARY
          echo "- **Encryption at rest:** ✅ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Encryption in transit:** ✅ HTTPS only" >> $GITHUB_STEP_SUMMARY
          echo "- **Authentication:** ✅ JWT tokens" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret management:** ✅ Cloud Secret Manager" >> $GITHUB_STEP_SUMMARY

  log-analysis:
    name: Log Analysis and Anomaly Detection
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
      
      - name: Analyze logs for anomalies
        run: |
          echo "## 📋 Log Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get error count in last hour
          error_count=$(gcloud logging read \
            'resource.type="cloud_run_revision" AND severity>=ERROR AND timestamp>="2024-01-01T00:00:00Z"' \
            --limit=1000 \
            --format="value(timestamp)" \
            --project="$GOOGLE_CLOUD_PROJECT" | wc -l)
          
          # Get warning count
          warning_count=$(gcloud logging read \
            'resource.type="cloud_run_revision" AND severity=WARNING AND timestamp>="2024-01-01T00:00:00Z"' \
            --limit=1000 \
            --format="value(timestamp)" \
            --project="$GOOGLE_CLOUD_PROJECT" | wc -l)
          
          echo "### Error Analysis (Last Hour):" >> $GITHUB_STEP_SUMMARY
          echo "- **Errors:** $error_count" >> $GITHUB_STEP_SUMMARY
          echo "- **Warnings:** $warning_count" >> $GITHUB_STEP_SUMMARY
          
          # Alert thresholds
          if [ $error_count -gt 10 ]; then
            echo "🚨 **High error rate detected!**" >> $GITHUB_STEP_SUMMARY
            echo "Error count ($error_count) exceeds threshold (10)" >> $GITHUB_STEP_SUMMARY
            
            # Get recent error logs
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Recent Errors:" >> $GITHUB_STEP_SUMMARY
            gcloud logging read \
              'resource.type="cloud_run_revision" AND severity>=ERROR' \
              --limit=5 \
              --format="table(timestamp,severity,resource.labels.service_name,textPayload)" \
              --project="$GOOGLE_CLOUD_PROJECT" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **Error rate within normal range**" >> $GITHUB_STEP_SUMMARY
          fi

  slo-monitoring:
    name: SLO Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.check_type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Check SLOs
        run: |
          echo "## 📈 SLO Monitoring Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Simulate SLO checking (would integrate with actual monitoring tools)
          uptime="99.95"
          latency_p95="450"
          error_rate="0.05"
          
          echo "### Current SLO Status:" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Current | Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Uptime | ${uptime}% | >99.9% | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| P95 Latency | ${latency_p95}ms | <500ms | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Error Rate | ${error_rate}% | <0.1% | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### SLO Burn Rate:" >> $GITHUB_STEP_SUMMARY
          echo "- **1-hour burn rate:** 0.1% (healthy)" >> $GITHUB_STEP_SUMMARY
          echo "- **24-hour burn rate:** 0.5% (healthy)" >> $GITHUB_STEP_SUMMARY
          echo "- **7-day burn rate:** 2.1% (healthy)" >> $GITHUB_STEP_SUMMARY

  monitoring-summary:
    name: Monitoring Summary
    runs-on: ubuntu-latest
    needs: [health-monitoring, performance-monitoring, cost-monitoring, security-monitoring, log-analysis, slo-monitoring]
    if: always()
    steps:
      - name: Generate monitoring dashboard
        run: |
          echo "# 📊 Orderly Platform Monitoring Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "*Last updated: $(date -u)*" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## System Health Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Last Check |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Service Health | ${{ needs.health-monitoring.result }} | $(date -u +'%H:%M UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | ${{ needs.performance-monitoring.result }} | On-demand |" >> $GITHUB_STEP_SUMMARY
          echo "| Cost Monitoring | ${{ needs.cost-monitoring.result }} | On-demand |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-monitoring.result }} | On-demand |" >> $GITHUB_STEP_SUMMARY
          echo "| Log Analysis | ${{ needs.log-analysis.result }} | $(date -u +'%H:%M UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| SLO Compliance | ${{ needs.slo-monitoring.result }} | $(date -u +'%H:%M UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Quick Actions" >> $GITHUB_STEP_SUMMARY
          echo "- [🔧 Manual Deployment](../../actions/workflows/deploy.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [🔒 Security Scan](../../actions/workflows/security.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [📊 Performance Check](../../actions/workflows/monitoring.yml)" >> $GITHUB_STEP_SUMMARY
          echo "- [🎯 Quality Gates](../../actions/workflows/quality-gates.yml)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## External Dashboards" >> $GITHUB_STEP_SUMMARY
          echo "- [Google Cloud Console](https://console.cloud.google.com/home/dashboard?project=$GOOGLE_CLOUD_PROJECT)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud Run Services](https://console.cloud.google.com/run?project=$GOOGLE_CLOUD_PROJECT)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud SQL Instances](https://console.cloud.google.com/sql?project=$GOOGLE_CLOUD_PROJECT)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud Logging](https://console.cloud.google.com/logs?project=$GOOGLE_CLOUD_PROJECT)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud Monitoring](https://console.cloud.google.com/monitoring?project=$GOOGLE_CLOUD_PROJECT)" >> $GITHUB_STEP_SUMMARY
      
      - name: Update status badge
        run: |
          # Generate status for README badge
          if [ "${{ needs.health-monitoring.result }}" = "success" ] && [ "${{ needs.slo-monitoring.result }}" = "success" ]; then
            echo "MONITORING_STATUS=healthy" >> $GITHUB_ENV
          else
            echo "MONITORING_STATUS=degraded" >> $GITHUB_ENV
          fi