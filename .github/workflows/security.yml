name: Security Scanning

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours as mentioned in CLAUDE.md
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          echo "## NPM Audit Results" >> $GITHUB_STEP_SUMMARY
          npm audit --audit-level moderate --format json > audit.json || true
          
          # Parse and display critical/high vulnerabilities
          if [ -f audit.json ]; then
            HIGH_VULN=$(jq '.metadata.vulnerabilities.high // 0' audit.json)
            CRITICAL_VULN=$(jq '.metadata.vulnerabilities.critical // 0' audit.json)
            
            echo "- **Critical vulnerabilities:** $CRITICAL_VULN" >> $GITHUB_STEP_SUMMARY
            echo "- **High vulnerabilities:** $HIGH_VULN" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL_VULN" -gt 0 ] || [ "$HIGH_VULN" -gt 5 ]; then
              echo "❌ Security scan failed: Too many high/critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi
      
      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk.json
        continue-on-error: true
      
      - name: Upload Snyk results to GitHub
        uses: github/codeql-action/upload-sarif@v2
        if: hashFiles('snyk.sarif') != ''
        with:
          sarif_file: snyk.sarif

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          queries: security-and-quality
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:javascript"

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, order-service, product-service, acceptance-service, billing-service, notification-service, admin-service]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if service exists
        id: check-service
        run: |
          if [ -d "backend/${{ matrix.service }}" ] && [ -f "backend/${{ matrix.service }}/Dockerfile.cloudrun" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build Docker image for security scan
        if: steps.check-service.outputs.exists == 'true'
        run: |
          docker build -f backend/${{ matrix.service }}/Dockerfile.cloudrun \
            -t orderly-${{ matrix.service }}:scan \
            backend/${{ matrix.service }}
      
      - name: Run Trivy vulnerability scanner
        if: steps.check-service.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'orderly-${{ matrix.service }}:scan'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'HIGH,CRITICAL'
      
      - name: Upload Trivy scan results
        if: steps.check-service.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: SOC2 Compliance Check
        run: |
          echo "## SOC2 Compliance Check" >> $GITHUB_STEP_SUMMARY
          
          # Check for required security configurations
          compliance_issues=()
          
          # Check for encryption configurations
          if ! grep -r "encrypt" backend/*/src/ > /dev/null 2>&1; then
            compliance_issues+=("Missing encryption configurations")
          fi
          
          # Check for audit logging
          if ! grep -r "audit\|log" backend/*/src/ > /dev/null 2>&1; then
            compliance_issues+=("Missing audit logging")
          fi
          
          # Check for access control
          if ! grep -r "auth\|permission" backend/*/src/ > /dev/null 2>&1; then
            compliance_issues+=("Missing access control")
          fi
          
          # Check for secure headers
          if ! grep -r "helmet\|security" backend/*/src/ > /dev/null 2>&1; then
            compliance_issues+=("Missing security headers")
          fi
          
          if [ ${#compliance_issues[@]} -eq 0 ]; then
            echo "✅ SOC2 compliance checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ SOC2 compliance issues found:" >> $GITHUB_STEP_SUMMARY
            for issue in "${compliance_issues[@]}"; do
              echo "- $issue" >> $GITHUB_STEP_SUMMARY
            done
          fi
      
      - name: GDPR Compliance Check
        run: |
          echo "## GDPR Compliance Check" >> $GITHUB_STEP_SUMMARY
          
          gdpr_issues=()
          
          # Check for data consent mechanisms
          if ! grep -r "consent\|gdpr" . > /dev/null 2>&1; then
            gdpr_issues+=("Missing consent management")
          fi
          
          # Check for data deletion capabilities
          if ! grep -r "delete\|remove" backend/*/src/ > /dev/null 2>&1; then
            gdpr_issues+=("Missing data deletion capabilities")
          fi
          
          # Check for data portability
          if ! grep -r "export\|dump" backend/*/src/ > /dev/null 2>&1; then
            gdpr_issues+=("Missing data portability features")
          fi
          
          if [ ${#gdpr_issues[@]} -eq 0 ]; then
            echo "✅ GDPR compliance checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ GDPR compliance issues found:" >> $GITHUB_STEP_SUMMARY
            for issue in "${gdpr_issues[@]}"; do
              echo "- $issue" >> $GITHUB_STEP_SUMMARY
            done
          fi

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Scan Terraform configurations
        if: hashFiles('infrastructure/**/*.tf') != ''
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'infrastructure/'
          format: 'sarif'
          output: 'trivy-infrastructure.sarif'
      
      - name: Upload infrastructure scan results
        if: hashFiles('trivy-infrastructure.sarif') != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-infrastructure.sarif'
          category: 'trivy-infrastructure'
      
      - name: Scan Docker configurations
        run: |
          echo "## Docker Security Scan" >> $GITHUB_STEP_SUMMARY
          
          docker_issues=()
          
          # Check for non-root users in Dockerfiles
          for dockerfile in backend/*/Dockerfile*; do
            if [ -f "$dockerfile" ]; then
              if ! grep -q "USER " "$dockerfile"; then
                docker_issues+=("$dockerfile: Missing non-root user")
              fi
            fi
          done
          
          # Check for security updates in Dockerfiles
          for dockerfile in backend/*/Dockerfile*; do
            if [ -f "$dockerfile" ]; then
              if ! grep -q "apk.*upgrade\|apt.*upgrade" "$dockerfile"; then
                docker_issues+=("$dockerfile: Missing security updates")
              fi
            fi
          done
          
          if [ ${#docker_issues[@]} -eq 0 ]; then
            echo "✅ Docker security checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Docker security issues found:" >> $GITHUB_STEP_SUMMARY
            for issue in "${docker_issues[@]}"; do
              echo "- $issue" >> $GITHUB_STEP_SUMMARY
            done
          fi

  penetration-test:
    name: OWASP ZAP Security Test
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'https://example.com'  # Update with actual staging URL
          rules_file_name: '.zap/rules.conf'
          cmd_options: '-a'
      
      - name: Create ZAP rules configuration
        run: |
          mkdir -p .zap
          cat > .zap/rules.conf << EOF
          # ZAP Scanning Rules Configuration
          # Ignore false positives
          10016	IGNORE	(Cross-Domain JavaScript Source File Inclusion)
          10021	IGNORE	(X-Content-Type-Options Header Missing)
          10025	IGNORE	(Information Disclosure - Debug Error Messages)
          EOF

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, container-scan, secrets-scan, compliance-check, infrastructure-scan]
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} | NPM Audit + Snyk |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Scan | ${{ needs.sast-scan.result }} | CodeQL Analysis |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result }} | Trivy Vulnerability Scanner |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Detection | ${{ needs.secrets-scan.result }} | TruffleHog OSS |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Check | ${{ needs.compliance-check.result }} | SOC2 + GDPR |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure Scan | ${{ needs.infrastructure-scan.result }} | Terraform + Docker |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Calculate overall security status
          failed_scans=0
          if [ "${{ needs.dependency-scan.result }}" != "success" ]; then failed_scans=$((failed_scans + 1)); fi
          if [ "${{ needs.sast-scan.result }}" != "success" ]; then failed_scans=$((failed_scans + 1)); fi
          if [ "${{ needs.container-scan.result }}" != "success" ]; then failed_scans=$((failed_scans + 1)); fi
          if [ "${{ needs.secrets-scan.result }}" != "success" ]; then failed_scans=$((failed_scans + 1)); fi
          if [ "${{ needs.compliance-check.result }}" != "success" ]; then failed_scans=$((failed_scans + 1)); fi
          if [ "${{ needs.infrastructure-scan.result }}" != "success" ]; then failed_scans=$((failed_scans + 1)); fi
          
          if [ $failed_scans -eq 0 ]; then
            echo "## ✅ All security scans passed!" >> $GITHUB_STEP_SUMMARY
            echo "The codebase meets security standards for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Security issues detected!" >> $GITHUB_STEP_SUMMARY
            echo "$failed_scans out of 6 security scans failed." >> $GITHUB_STEP_SUMMARY
            echo "Review the security findings before deployment." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next scan scheduled:** Every 6 hours (automated)" >> $GITHUB_STEP_SUMMARY
          echo "**Manual scan:** Use 'Run workflow' button" >> $GITHUB_STEP_SUMMARY