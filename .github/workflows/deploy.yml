name: Deploy to Cloud Run

permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches: [ staging, develop, main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      services:
        description: 'Services to deploy (comma-separated, leave empty for all)'
        required: false
        type: string

env:
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GCP_PROJECT_ID || secrets.GOOGLE_CLOUD_PROJECT || 'orderly-472413' }}
  GOOGLE_CLOUD_REGION: asia-east1
  REGISTRY: asia-east1-docker.pkg.dev

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy: ${{ steps.env.outputs.deploy }}
    steps:
      - name: Determine deployment environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.deploy == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    needs: [determine-environment]
    if: needs.determine-environment.outputs.deploy == 'true'
    outputs:
      changed-services: ${{ steps.changes.outputs.services }}
      has-infrastructure-changes: ${{ steps.changes.outputs.infrastructure }}
      has-frontend-changes: ${{ steps.changes.outputs.frontend }}
      all-services: ${{ steps.changes.outputs.all_services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for proper diff
      
      - name: Detect changed services and components
        id: changes
        run: |
          # Define all available services
          ALL_SERVICES='["api-gateway-fastapi","user-service-fastapi","order-service-fastapi","product-service-fastapi","acceptance-service-fastapi","notification-service-fastapi","customer-hierarchy-service-fastapi","supplier-service-fastapi"]'
          echo "all_services=$ALL_SERVICES" >> $GITHUB_OUTPUT
          
          # Get changed files (compare with previous commit or main if first push)
          if [ "${{ github.event_name }}" = "push" ] && [ -n "$(git rev-parse --verify HEAD~1 2>/dev/null)" ]; then
            changed_files=$(git diff --name-only HEAD~1 HEAD)
          else
            # First commit or manual trigger - deploy all services
            echo "services=$ALL_SERVICES" >> $GITHUB_OUTPUT
            echo "infrastructure=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
            echo "📦 Manual trigger or first commit - deploying all services"
            exit 0
          fi
          
          echo "🔍 Changed files:"
          echo "$changed_files"
          
          # Check for infrastructure changes
          infrastructure_changed=false
          if echo "$changed_files" | grep -E "(infrastructure/|\.github/workflows/|scripts/deploy|docker-compose)" > /dev/null; then
            infrastructure_changed=true
          fi
          echo "infrastructure=$infrastructure_changed" >> $GITHUB_OUTPUT
          
          # Check for frontend changes
          frontend_changed=false
          echo "🔍 Testing frontend pattern match..."
          if echo "$changed_files" | grep -E "(app/|components/|lib/|shared/types/|package\.json|Dockerfile\.frontend)"; then
            frontend_changed=true
            echo "✅ Frontend changes detected!"
          else
            echo "❌ No frontend changes detected"
          fi
          echo "frontend=$frontend_changed" >> $GITHUB_OUTPUT
          
          # Detect changed services
          changed_services=()
          for service in api-gateway-fastapi user-service-fastapi order-service-fastapi product-service-fastapi acceptance-service-fastapi notification-service-fastapi customer-hierarchy-service-fastapi supplier-service-fastapi; do
            if echo "$changed_files" | grep -q "backend/$service/"; then
              changed_services+=("\"$service\"")
              echo "📦 Detected changes in: $service"
            fi
          done
          
          # Check for shared library changes that affect all services
          if echo "$changed_files" | grep -E "(backend/libs/|shared/types/)" > /dev/null; then
            echo "📚 Shared library changes detected - rebuilding all services"
            changed_services=("\"api-gateway-fastapi\"" "\"user-service-fastapi\"" "\"order-service-fastapi\"" "\"product-service-fastapi\"" "\"acceptance-service-fastapi\"" "\"notification-service-fastapi\"" "\"customer-hierarchy-service-fastapi\"" "\"supplier-service-fastapi\"")
          fi
          
          # Format as JSON array
          if [ ${#changed_services[@]} -eq 0 ]; then
            echo "services=[]" >> $GITHUB_OUTPUT
            echo "🚫 No service changes detected"
          else
            services_json="[$(IFS=,; echo "${changed_services[*]}")]"
            echo "services=$services_json" >> $GITHUB_OUTPUT
            echo "✅ Services to deploy: $services_json"
          fi

  setup-registry:
    name: Setup Artifact Registry
    runs-on: ubuntu-latest
    needs: [determine-environment, detect-changes]
    if: needs.determine-environment.outputs.deploy == 'true' && (needs.detect-changes.outputs.changed-services != '[]' || needs.detect-changes.outputs.has-infrastructure-changes == 'true')
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Create Artifact Registry repository
        run: |
          # Create repository if it doesn't exist (single job to avoid race condition)
          gcloud artifacts repositories describe orderly \
            --location=asia-east1 \
            --format="value(name)" || \
          gcloud artifacts repositories create orderly \
            --repository-format=docker \
            --location=asia-east1 \
            --description="Orderly microservices container registry"
          
          echo "✅ Artifact Registry repository ready"

  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [determine-environment, detect-changes, setup-registry]
    if: needs.determine-environment.outputs.deploy == 'true' && needs.detect-changes.outputs.changed-services != '[]'
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
      fail-fast: false
      max-parallel: 8  # Increased from 3 to 8 for faster parallel builds

    steps:
      - uses: actions/checkout@v4
      
      # Multi-layer caching setup
      - name: Set up Docker Buildx with cache
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest
          buildkitd-flags: --allow-insecure-entitlement security.insecure
      
      - name: Setup pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-${{ matrix.service }}-${{ hashFiles(format('backend/{0}/requirements.txt', matrix.service)) }}
          restore-keys: |
            pip-${{ matrix.service }}-
            pip-
      
      - name: Setup build cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-${{ matrix.service }}
          key: buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ matrix.service }}-
            buildx-
      
      - name: Check if service exists
        id: check-service
        run: |
          SERVICE_DIR="backend/${{ matrix.service }}"
          if [ -d "$SERVICE_DIR" ] && [ -f "$SERVICE_DIR/Dockerfile" ]; then
            echo "✅ Found service at $SERVICE_DIR"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Service not found at $SERVICE_DIR"
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Debug: Listing actual FastAPI services:"
            ls -la backend/ | grep fastapi || echo "No FastAPI services found"
          fi
      
      - name: Authenticate to Google Cloud
        if: steps.check-service.outputs.exists == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        if: steps.check-service.outputs.exists == 'true'
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker to use gcloud as credential helper
        if: steps.check-service.outputs.exists == 'true'
        run: gcloud auth configure-docker asia-east1-docker.pkg.dev
      
      - name: Build and push Docker image with enhanced caching
        if: steps.check-service.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        env:
          IMAGE_TAG: ${{ github.sha }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        with:
          context: backend
          file: backend/${{ matrix.service }}/Dockerfile
          push: true
          platforms: linux/amd64  # Specify platform for consistency
          tags: |
            ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/orderly/orderly-${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/orderly/orderly-${{ matrix.service }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/orderly/orderly-${{ matrix.service }}:${{ needs.determine-environment.outputs.environment }}
          # Enhanced multi-layer caching
          cache-from: |
            type=local,src=/tmp/.buildx-cache-${{ matrix.service }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/orderly/cache-${{ matrix.service }}:latest
            type=registry,ref=${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/orderly/cache-${{ matrix.service }}:${{ needs.determine-environment.outputs.environment }}
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-${{ matrix.service }}-new,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.GOOGLE_CLOUD_PROJECT }}/orderly/cache-${{ matrix.service }}:latest,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SERVICE_NAME=${{ matrix.service }}
      
      - name: Optimize cache
        if: steps.check-service.outputs.exists == 'true'
        run: |
          # Move cache to optimize for next build
          rm -rf /tmp/.buildx-cache-${{ matrix.service }}
          mv /tmp/.buildx-cache-${{ matrix.service }}-new /tmp/.buildx-cache-${{ matrix.service }} || true

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [determine-environment, build-and-push]
    if: needs.determine-environment.outputs.deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Deploy infrastructure
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          chmod +x scripts/deploy-cloud-run.sh
          scripts/deploy-cloud-run.sh infra

  deploy-services:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs: [determine-environment, detect-changes, deploy-infrastructure]
    if: needs.determine-environment.outputs.deploy == 'true' && needs.detect-changes.outputs.changed-services != '[]'
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.changed-services) }}
      fail-fast: false
      max-parallel: 8  # Increased from 3 to 8 for faster parallel deployments

    steps:
      - uses: actions/checkout@v4
      
      - name: Check if service should be deployed
        id: check-deploy
        run: |
          # Check if specific services were requested
          if [ -n "${{ github.event.inputs.services }}" ]; then
            if echo "${{ github.event.inputs.services }}" | grep -q "${{ matrix.service }}"; then
              echo "deploy=true" >> $GITHUB_OUTPUT
            else
              echo "deploy=false" >> $GITHUB_OUTPUT
            fi
          else
            # Deploy all services if none specified
            if [ -d "backend/${{ matrix.service }}" ]; then
              echo "deploy=true" >> $GITHUB_OUTPUT
            else
              echo "deploy=false" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Authenticate to Google Cloud
        if: steps.check-deploy.outputs.deploy == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        if: steps.check-deploy.outputs.deploy == 'true'
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Deploy ${{ matrix.service }}
        if: steps.check-deploy.outputs.deploy == 'true'
        env:
          IMAGE_TAG: ${{ github.sha }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
        run: |
          # Validate service name
          case "${{ matrix.service }}" in
            "api-gateway-fastapi"|"user-service-fastapi"|"order-service-fastapi"|"product-service-fastapi"|"acceptance-service-fastapi"|"notification-service-fastapi"|"customer-hierarchy-service-fastapi"|"supplier-service-fastapi") 
              echo "Deploying service: ${{ matrix.service }}"
              ;;
            *) echo "Unknown service: ${{ matrix.service }}"; exit 1 ;;
          esac
          
          # Get database connection name
          DB_CONNECTION_NAME=$(gcloud sql instances describe orderly-db \
            --format="value(connectionName)" --project="$GOOGLE_CLOUD_PROJECT")
          
          # Get Redis IP
          REDIS_HOST=$(gcloud redis instances describe orderly-cache \
            --region="$GOOGLE_CLOUD_REGION" --format="value(host)" --project="$GOOGLE_CLOUD_PROJECT")
          
          # Set resource limits based on environment
          if [ "$ENVIRONMENT" = "production" ]; then
            MEMORY="1Gi"
            CPU="2"
            MIN_INSTANCES="1"
            MAX_INSTANCES="20"
            CONCURRENCY="80"
          else
            MEMORY="512Mi"
            CPU="1"
            MIN_INSTANCES="0"
            MAX_INSTANCES="10"
            CONCURRENCY="100"
          fi
          
          # Deploy to Cloud Run
          gcloud run deploy "orderly-${{ matrix.service }}-$ENVIRONMENT" \
            --image="$REGISTRY/$GOOGLE_CLOUD_PROJECT/orderly/orderly-${{ matrix.service }}:$IMAGE_TAG" \
            --platform=managed \
            --region="$GOOGLE_CLOUD_REGION" \
            --allow-unauthenticated \
            --memory="$MEMORY" \
            --cpu="$CPU" \
            --min-instances="$MIN_INSTANCES" \
            --max-instances="$MAX_INSTANCES" \
            --concurrency="$CONCURRENCY" \
            --timeout=300 \
            --set-env-vars="NODE_ENV=$ENVIRONMENT" \
            --set-env-vars="REDIS_HOST=$REDIS_HOST,REDIS_PORT=6379" \
            --set-env-vars="DATABASE_HOST=/cloudsql/$DB_CONNECTION_NAME,DATABASE_NAME=orderly,DATABASE_USER=orderly" \
            --set-secrets="POSTGRES_PASSWORD=postgres-password:latest" \
            --set-secrets="JWT_SECRET=jwt-secret:latest" \
            --set-secrets="JWT_REFRESH_SECRET=jwt-refresh-secret:latest" \
            --add-cloudsql-instances="$DB_CONNECTION_NAME" \
            --project="$GOOGLE_CLOUD_PROJECT" \
            --labels="environment=$ENVIRONMENT,service=${{ matrix.service }},version=$IMAGE_TAG"

  configure-routing:
    name: Configure Service Routing
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure]
    if: needs.determine-environment.outputs.deploy == 'true'
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure API Gateway routing
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          # Get all service URLs
          declare -A service_urls
          for service in api-gateway-fastapi user-service-fastapi order-service-fastapi product-service-fastapi acceptance-service-fastapi notification-service-fastapi customer-hierarchy-service-fastapi supplier-service-fastapi; do
            url=$(gcloud run services describe "orderly-$service-$ENVIRONMENT" \
              --region="$GOOGLE_CLOUD_REGION" --format="value(status.url)" \
              --project="$GOOGLE_CLOUD_PROJECT" 2>/dev/null || echo "")
            if [ -n "$url" ]; then
              service_urls["$service"]="$url"
            fi
          done
          
          # Update API Gateway with service URLs
          env_vars="NODE_ENV=$ENVIRONMENT"
          for service in "${!service_urls[@]}"; do
            env_name=$(echo "$service" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
            env_vars="${env_vars},${env_name}_URL=${service_urls[$service]}"
          done
          
          gcloud run services update "orderly-api-gateway-fastapi-$ENVIRONMENT" \
            --region="$GOOGLE_CLOUD_REGION" \
            --set-env-vars="$env_vars" \
            --project="$GOOGLE_CLOUD_PROJECT"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [determine-environment, detect-changes, deploy-infrastructure]
    if: needs.determine-environment.outputs.deploy == 'true' && needs.detect-changes.outputs.has-frontend-changes == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker asia-east1-docker.pkg.dev
        
      - name: Build and deploy frontend
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          REGISTRY: ${{ env.REGISTRY }}
          GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_REGION: ${{ env.GOOGLE_CLOUD_REGION }}
        run: |
          echo "🚀 Building and deploying frontend for $ENVIRONMENT"
          
          # Get API Gateway URL for frontend configuration
          BACKEND_URL=$(gcloud run services describe "orderly-api-gateway-fastapi-$ENVIRONMENT" \
            --region="$GOOGLE_CLOUD_REGION" --format="value(status.url)" \
            --project="$GOOGLE_CLOUD_PROJECT" 2>/dev/null || echo "")
          
          if [ -z "$BACKEND_URL" ]; then
            echo "⚠️ API Gateway not found, using placeholder URL"
            BACKEND_URL="https://orderly-api-gateway-fastapi-$ENVIRONMENT-placeholder.run.app"
          fi
          
          echo "📡 Backend URL for frontend: $BACKEND_URL"
          
          # Build frontend image (no build-time backend URL needed)
          docker buildx build \
            --platform linux/amd64 \
            --tag "$REGISTRY/$GOOGLE_CLOUD_PROJECT/orderly/orderly-frontend:$ENVIRONMENT-${{ github.sha }}" \
            --tag "$REGISTRY/$GOOGLE_CLOUD_PROJECT/orderly/orderly-frontend:$ENVIRONMENT-latest" \
            --push \
            -f Dockerfile.frontend \
            .
          
          # Deploy to Cloud Run with backend URL as runtime variable
          gcloud run deploy "orderly-frontend-$ENVIRONMENT" \
            --image="$REGISTRY/$GOOGLE_CLOUD_PROJECT/orderly/orderly-frontend:$ENVIRONMENT-${{ github.sha }}" \
            --region="$GOOGLE_CLOUD_REGION" \
            --platform=managed \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=$ENVIRONMENT,ORDERLY_BACKEND_URL=$BACKEND_URL,BACKEND_URL=$BACKEND_URL" \
            --memory=1Gi \
            --cpu=1 \
            --min-instances=0 \
            --max-instances=10 \
            --concurrency=100 \
            --port=8080 \
            --project="$GOOGLE_CLOUD_PROJECT"
          
          echo "✅ Frontend deployed successfully with backend URL: $BACKEND_URL"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [determine-environment, configure-routing, deploy-frontend]
    if: always() && needs.determine-environment.outputs.deploy == 'true'
    steps:
      - name: Wait for services to be ready
        run: sleep 30
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Perform health checks
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
        run: |
          # Health check all deployed services
          failed_services=()
          for service in api-gateway-fastapi user-service-fastapi order-service-fastapi product-service-fastapi acceptance-service-fastapi notification-service-fastapi customer-hierarchy-service-fastapi supplier-service-fastapi; do
            url=$(gcloud run services describe "orderly-$service-$ENVIRONMENT" \
              --region="$GOOGLE_CLOUD_REGION" --format="value(status.url)" \
              --project="$GOOGLE_CLOUD_PROJECT" 2>/dev/null || echo "")
            
            if [ -n "$url" ]; then
              echo "Checking health of $service at $url/health"
              if curl -sf "$url/health" --max-time 30 > /dev/null; then
                echo "✅ $service is healthy"
              else
                echo "❌ $service failed health check"
                failed_services+=("$service")
              fi
            else
              echo "⚠️ $service not found or not deployed"
            fi
          done
          
          if [ ${#failed_services[@]} -gt 0 ]; then
            echo "Failed services: ${failed_services[*]}"
            exit 1
          fi
          
          echo "All services are healthy! 🎉"

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [determine-environment, health-check, deploy-frontend]
    if: always() && needs.determine-environment.outputs.deploy == 'true'
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Create deployment summary
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          HEALTH_CHECK_STATUS: ${{ needs.health-check.result }}
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** $HEALTH_CHECK_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service URLs:" >> $GITHUB_STEP_SUMMARY
          
          for service in api-gateway-fastapi user-service-fastapi order-service-fastapi product-service-fastapi acceptance-service-fastapi notification-service-fastapi customer-hierarchy-service-fastapi supplier-service-fastapi; do
            url=$(gcloud run services describe "orderly-$service-$ENVIRONMENT" \
              --region="$GOOGLE_CLOUD_REGION" --format="value(status.url)" \
              --project="$GOOGLE_CLOUD_PROJECT" 2>/dev/null || echo "Not deployed")
            echo "- **$service:** $url" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Monitoring Links:" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud Run Console](https://console.cloud.google.com/run?project=$GOOGLE_CLOUD_PROJECT)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud SQL Console](https://console.cloud.google.com/sql?project=$GOOGLE_CLOUD_PROJECT)" >> $GITHUB_STEP_SUMMARY
          echo "- [Cloud Logging](https://console.cloud.google.com/logs?project=$GOOGLE_CLOUD_PROJECT)" >> $GITHUB_STEP_SUMMARY
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.health-check.result }}" = "success" ]; then
            echo "🎉 Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully!"
          else
            echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          fi