version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: orderly
      POSTGRES_USER: orderly
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderly -d orderly"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - orderly-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - orderly-network

  # API Gateway (FastAPI)
  api-gateway:
    build:
      context: ./backend/api-gateway-fastapi
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=staging
      - USER_SERVICE_URL=http://user-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - ACCEPTANCE_SERVICE_URL=http://acceptance-service:3004
      - BILLING_SERVICE_URL=http://billing-service:3005
      - NOTIFICATION_SERVICE_URL=http://notification-service:3006
      - CUSTOMER_HIERARCHY_SERVICE_URL=http://customer-hierarchy-service:3007/api/v2
      - CORS_ORIGINS=${CORS_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      order-service:
        condition: service_started
      product-service:
        condition: service_started
      acceptance-service:
        condition: service_started
      billing-service:
        condition: service_started
      notification-service:
        condition: service_started
      customer-hierarchy-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - orderly-network

  # FastAPI services (internal-only; no host port mapping)
  user-service:
    build:
      context: ./backend/user-service-fastapi
      dockerfile: Dockerfile
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql+asyncpg://orderly:${POSTGRES_PASSWORD}@postgres:5432/orderly
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - orderly-network

  order-service:
    build:
      context: ./backend/order-service-fastapi
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql+asyncpg://orderly:${POSTGRES_PASSWORD}@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - orderly-network

  product-service:
    build:
      context: ./backend/product-service-fastapi
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql+asyncpg://orderly:${POSTGRES_PASSWORD}@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - orderly-network

  acceptance-service:
    build:
      context: ./backend/acceptance-service-fastapi
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql+asyncpg://orderly:${POSTGRES_PASSWORD}@postgres:5432/orderly
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/acceptance/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - orderly-network

  billing-service:
    build:
      context: ./backend/billing-service-fastapi
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql+asyncpg://orderly:${POSTGRES_PASSWORD}@postgres:5432/orderly
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - orderly-network

  notification-service:
    build:
      context: ./backend/notification-service-fastapi
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql+asyncpg://orderly:${POSTGRES_PASSWORD}@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - orderly-network

  customer-hierarchy-service:
    build:
      context: ./backend/customer-hierarchy-service-fastapi
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql+asyncpg://orderly:${POSTGRES_PASSWORD}@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - orderly-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  orderly-network:
    driver: bridge
