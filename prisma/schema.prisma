// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// 多租戶基礎模型
// ============================================================================

model Organization {
  id        String            @id @default(cuid())
  name      String
  type      OrganizationType
  settings  Json              @default("{}")
  isActive  Boolean           @default(true)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // 關聯
  users               User[]
  suppliedProducts    Product[]         @relation("SupplierProducts")
  restaurantOrders    Order[]           @relation("RestaurantOrders")
  supplierOrders      Order[]           @relation("SupplierOrders")
  restaurantRecons    Reconciliation[]  @relation("RestaurantReconciliations")
  supplierRecons      Reconciliation[]  @relation("SupplierReconciliations")
  erpSyncLogs         ERPSyncLog[]

  @@map("organizations")
}

enum OrganizationType {
  restaurant
  supplier
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  passwordHash   String?
  organizationId String
  role           UserRole
  isActive       Boolean   @default(true)
  lastLoginAt    DateTime?
  metadata       Json      @default("{}")
  tokenVersion   Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // 關聯
  organization        Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdOrders       Order[]           @relation("OrderCreator")
  createdRecons       Reconciliation[]  @relation("ReconciliationCreator")
  approvedRecons      Reconciliation[]  @relation("ReconciliationApprover")
  auditLogs           AuditLog[]
  notifications       Notification[]

  @@map("users")
}

enum UserRole {
  restaurant_admin
  restaurant_manager
  restaurant_operator
  supplier_admin
  supplier_manager
  platform_admin
}

// ============================================================================
// 產品與定價模型
// ============================================================================

model Product {
  id            String   @id @default(cuid())
  supplierId    String
  code          String
  name          String
  category      String?
  pricing       Json     // 彈性定價規則
  specifications Json    @default("{}")
  version       Int      @default(1)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 關聯
  supplier    Organization @relation("SupplierProducts", fields: [supplierId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]

  @@unique([supplierId, code, version])
  @@map("products")
}

// ============================================================================
// 訂單管理模型
// ============================================================================

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  restaurantId    String
  supplierId      String
  status          OrderStatus @default(draft)
  subtotal        Decimal     @db.Decimal(12, 2)
  taxAmount       Decimal     @db.Decimal(12, 2)
  totalAmount     Decimal     @db.Decimal(12, 2)
  deliveryDate    DateTime    @db.Date
  deliveryAddress Json?
  notes           String?
  adjustments     Json        @default("[]")
  createdBy       String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // 關聯
  restaurant          Organization        @relation("RestaurantOrders", fields: [restaurantId], references: [id], onDelete: Cascade)
  supplier            Organization        @relation("SupplierOrders", fields: [supplierId], references: [id], onDelete: Cascade)
  creator             User                @relation("OrderCreator", fields: [createdBy], references: [id])
  items               OrderItem[]
  reconciliationItems ReconciliationItem[]

  @@index([restaurantId])
  @@index([supplierId])
  @@index([status])
  @@index([deliveryDate])
  @@map("orders")
}

enum OrderStatus {
  draft
  submitted
  confirmed
  preparing
  shipped
  delivered
  accepted
  completed
  cancelled
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  productCode String
  productName String
  quantity    Decimal @db.Decimal(10, 3)
  unitPrice   Decimal @db.Decimal(10, 4)
  lineTotal   Decimal @db.Decimal(12, 2)
  notes       String?
  createdAt   DateTime @default(now())

  // 關聯
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// ============================================================================
// 對帳管理模型
// ============================================================================

model Reconciliation {
  id                    String                @id @default(cuid())
  reconciliationNumber  String                @unique
  periodStart           DateTime              @db.Date
  periodEnd             DateTime              @db.Date
  restaurantId          String
  supplierId            String
  status                ReconciliationStatus  @default(pending)
  summary               Json                  // 對帳摘要數據
  discrepancies         Json                  @default("[]")
  resolution            Json?                 // 解決方案
  confidenceScore       Decimal?              @db.Decimal(5, 4) // 0.0000 to 1.0000
  autoApproved          Boolean               @default(false)
  createdBy             String
  approvedBy            String?
  approvedAt            DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt

  // 關聯
  restaurant  Organization          @relation("RestaurantReconciliations", fields: [restaurantId], references: [id], onDelete: Cascade)
  supplier    Organization          @relation("SupplierReconciliations", fields: [supplierId], references: [id], onDelete: Cascade)
  creator     User                  @relation("ReconciliationCreator", fields: [createdBy], references: [id])
  approver    User?                 @relation("ReconciliationApprover", fields: [approvedBy], references: [id])
  items       ReconciliationItem[]

  @@index([restaurantId, supplierId])
  @@index([periodStart, periodEnd])
  @@index([status])
  @@map("reconciliations")
}

enum ReconciliationStatus {
  pending
  processing
  review_required
  approved
  disputed
  resolved
}

model ReconciliationItem {
  id                  String  @id @default(cuid())
  reconciliationId    String
  orderId             String
  productCode         String
  orderedQuantity     Decimal @db.Decimal(10, 3)
  deliveredQuantity   Decimal @db.Decimal(10, 3)
  acceptedQuantity    Decimal @db.Decimal(10, 3)
  unitPrice           Decimal @db.Decimal(10, 4)
  lineTotal           Decimal @db.Decimal(12, 2)
  discrepancyType     String?
  discrepancyAmount   Decimal? @db.Decimal(12, 2)
  resolutionAction    String?
  notes               String?
  createdAt           DateTime @default(now())

  // 關聯
  reconciliation Reconciliation @relation(fields: [reconciliationId], references: [id], onDelete: Cascade)
  order          Order          @relation(fields: [orderId], references: [id])

  @@map("reconciliation_items")
}

// ============================================================================
// ERP 整合模型
// ============================================================================

model ERPSyncLog {
  id                String        @id @default(cuid())
  organizationId    String
  type              String        // orders, products, customers, reconciliation
  status            ERPSyncStatus
  message           String
  recordsProcessed  Int           @default(0)
  errors            Json          @default("[]")
  metadata          Json          @default("{}")
  createdAt         DateTime      @default(now())

  // 關聯
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("erp_sync_logs")
}

enum ERPSyncStatus {
  success
  error
  partial
}

// ============================================================================
// 通知系統模型
// ============================================================================

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json             @default("{}")
  read      Boolean          @default(false)
  readAt    DateTime?
  priority  NotificationPriority @default(medium)
  createdAt DateTime         @default(now())

  // 關聯
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  order_confirmed
  order_shipped
  order_delivered
  reconciliation_ready
  discrepancy_found
  payment_due
  erp_sync_error
  system_maintenance
}

enum NotificationPriority {
  low
  medium
  high
  urgent
}

// ============================================================================
// 審計追蹤模型
// ============================================================================

model AuditLog {
  id         String   @id @default(cuid())
  entityType String   // table name
  entityId   String   // record id
  action     String   // create, update, delete, approve
  userId     String?
  changes    Json?    // before/after values
  metadata   Json     @default("{}")
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // 關聯
  user User? @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================================================
// 檔案管理模型
// ============================================================================

model FileUpload {
  id           String   @id @default(cuid())
  filename     String   // 儲存的檔案名
  originalName String   // 原始檔案名
  mimetype     String
  size         Int
  url          String
  path         String?
  uploadedBy   String
  metadata     Json     @default("{}")
  createdAt    DateTime @default(now())

  @@index([uploadedBy])
  @@index([createdAt])
  @@map("file_uploads")
}

// ============================================================================
// 工作佇列模型
// ============================================================================

model WorkflowTask {
  id           String          @id @default(cuid())
  type         String
  status       WorkflowStatus  @default(pending)
  data         Json
  result       Json?
  error        String?
  attempts     Int             @default(0)
  maxAttempts  Int             @default(3)
  scheduledAt  DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@index([type])
  @@index([status])
  @@index([scheduledAt])
  @@index([createdAt])
  @@map("workflow_tasks")
}

enum WorkflowStatus {
  pending
  running
  completed
  failed
  cancelled
}

// ============================================================================
// 系統配置模型
// ============================================================================

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  category  String   @default("general")
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@map("system_configs")
}