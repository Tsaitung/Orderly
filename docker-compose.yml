version: '3.8'

services:
  # PostgreSQL Database with optimized configuration
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: orderly
      POSTGRES_USER: orderly
      POSTGRES_PASSWORD: orderly_dev_password
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/shared/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    networks:
      - orderly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderly"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cluster for caching, sessions, and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    networks:
      - orderly-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Elasticsearch for product search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - orderly-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # User Service (FastAPI)
  user-service:
    build:
      context: ./backend/user-service-fastapi
      dockerfile: Dockerfile
    # Internal communication only - no external port exposure
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://orderly:orderly_dev_password@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - orderly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service (FastAPI)
  order-service:
    build:
      context: ./backend/order-service-fastapi
      dockerfile: Dockerfile
    # Internal communication only - no external port exposure
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://orderly:orderly_dev_password@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - orderly-network

  # Product Service (FastAPI)
  product-service:
    build:
      context: ./backend/product-service-fastapi
      dockerfile: Dockerfile
    # Internal communication only - no external port exposure
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://orderly:orderly_dev_password@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - USER_SERVICE_URL=http://user-service:3001
      - LOG_LEVEL=DEBUG
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - orderly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Acceptance Service (FastAPI)
  acceptance-service:
    build:
      context: ./backend/acceptance-service-fastapi
      dockerfile: Dockerfile
    # Internal communication only - no external port exposure
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://orderly:orderly_dev_password@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - orderly-network

  # Billing Service (FastAPI)
  billing-service:
    build:
      context: ./backend/billing-service-fastapi
      dockerfile: Dockerfile
    # Internal communication only - no external port exposure
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://orderly:orderly_dev_password@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
      - EINVOICE_APP_ID=${EINVOICE_APP_ID}
      - EINVOICE_API_KEY=${EINVOICE_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - orderly-network

  # Notification Service (FastAPI)
  notification-service:
    build:
      context: ./backend/notification-service-fastapi
      dockerfile: Dockerfile
    # Internal communication only - no external port exposure
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://orderly:orderly_dev_password@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - orderly-network

  # Customer Hierarchy Service (FastAPI)
  customer-hierarchy-service:
    build:
      context: ./backend/customer-hierarchy-service-fastapi
      dockerfile: Dockerfile
    # Internal communication only - no external port exposure
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://orderly:orderly_dev_password@postgres:5432/orderly
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - LOG_LEVEL=DEBUG
      # Customer hierarchy specific settings
      - MAX_HIERARCHY_DEPTH=4
      - CACHE_TTL=300
      - BULK_OPERATION_LIMIT=1000
      - ENABLE_AUDIT_LOG=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      user-service:
        condition: service_healthy
    networks:
      - orderly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (FastAPI) - Single API entry point
  api-gateway:
    build:
      context: ./backend/api-gateway-fastapi
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - USER_SERVICE_URL=http://user-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - ACCEPTANCE_SERVICE_URL=http://acceptance-service:3004
      - BILLING_SERVICE_URL=http://billing-service:3005
      - NOTIFICATION_SERVICE_URL=http://notification-service:3006
      - CUSTOMER_HIERARCHY_SERVICE_URL=http://customer-hierarchy-service:3007/api/v2
      - CORS_ORIGINS=http://localhost:3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      customer-hierarchy-service:
        condition: service_healthy
    networks:
      - orderly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend - Main user interface
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:8000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_BASE_URL=/api/bff
      - NEXT_PUBLIC_CUSTOMER_HIERARCHY_API_URL=/api/bff/v2
      - NEXTAUTH_SECRET=dev-nextauth-secret-change-in-production
      - NEXTAUTH_URL=http://localhost:3000
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - orderly-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - orderly-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=orderly-admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - orderly-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  orderly-network:
    driver: bridge
